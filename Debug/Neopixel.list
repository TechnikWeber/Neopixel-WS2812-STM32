
Neopixel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d20  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08002f04  08002f04  00012f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f38  08002f38  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002f38  08002f38  00012f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f40  08002f40  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f40  08002f40  00012f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f44  08002f44  00012f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  2000000c  08002f54  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08002f54  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000089d3  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001766  00000000  00000000  00028a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a00  00000000  00000000  0002a170  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000938  00000000  00000000  0002ab70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b46f  00000000  00000000  0002b4a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007848  00000000  00000000  00046917  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009ba89  00000000  00000000  0004e15f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e9be8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002928  00000000  00000000  000e9c64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08002eec 	.word	0x08002eec

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08002eec 	.word	0x08002eec

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b974 	b.w	8000524 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	468c      	mov	ip, r1
 800025a:	4604      	mov	r4, r0
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d14b      	bne.n	80002fa <__udivmoddi4+0xa6>
 8000262:	428a      	cmp	r2, r1
 8000264:	4615      	mov	r5, r2
 8000266:	d967      	bls.n	8000338 <__udivmoddi4+0xe4>
 8000268:	fab2 f282 	clz	r2, r2
 800026c:	b14a      	cbz	r2, 8000282 <__udivmoddi4+0x2e>
 800026e:	f1c2 0720 	rsb	r7, r2, #32
 8000272:	fa01 f302 	lsl.w	r3, r1, r2
 8000276:	fa20 f707 	lsr.w	r7, r0, r7
 800027a:	4095      	lsls	r5, r2
 800027c:	ea47 0c03 	orr.w	ip, r7, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000286:	fbbc f7fe 	udiv	r7, ip, lr
 800028a:	fa1f f885 	uxth.w	r8, r5
 800028e:	fb0e c317 	mls	r3, lr, r7, ip
 8000292:	fb07 f908 	mul.w	r9, r7, r8
 8000296:	0c21      	lsrs	r1, r4, #16
 8000298:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800029c:	4599      	cmp	r9, r3
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x60>
 80002a0:	18eb      	adds	r3, r5, r3
 80002a2:	f107 31ff 	add.w	r1, r7, #4294967295
 80002a6:	f080 811c 	bcs.w	80004e2 <__udivmoddi4+0x28e>
 80002aa:	4599      	cmp	r9, r3
 80002ac:	f240 8119 	bls.w	80004e2 <__udivmoddi4+0x28e>
 80002b0:	3f02      	subs	r7, #2
 80002b2:	442b      	add	r3, r5
 80002b4:	eba3 0309 	sub.w	r3, r3, r9
 80002b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80002c0:	fb00 f108 	mul.w	r1, r0, r8
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ca:	42a1      	cmp	r1, r4
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0x8e>
 80002ce:	192c      	adds	r4, r5, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 8107 	bcs.w	80004e6 <__udivmoddi4+0x292>
 80002d8:	42a1      	cmp	r1, r4
 80002da:	f240 8104 	bls.w	80004e6 <__udivmoddi4+0x292>
 80002de:	3802      	subs	r0, #2
 80002e0:	442c      	add	r4, r5
 80002e2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e6:	2700      	movs	r7, #0
 80002e8:	1a64      	subs	r4, r4, r1
 80002ea:	b11e      	cbz	r6, 80002f4 <__udivmoddi4+0xa0>
 80002ec:	2300      	movs	r3, #0
 80002ee:	40d4      	lsrs	r4, r2
 80002f0:	e9c6 4300 	strd	r4, r3, [r6]
 80002f4:	4639      	mov	r1, r7
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xbe>
 80002fe:	2e00      	cmp	r6, #0
 8000300:	f000 80ec 	beq.w	80004dc <__udivmoddi4+0x288>
 8000304:	2700      	movs	r7, #0
 8000306:	e9c6 0100 	strd	r0, r1, [r6]
 800030a:	4638      	mov	r0, r7
 800030c:	4639      	mov	r1, r7
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f783 	clz	r7, r3
 8000316:	2f00      	cmp	r7, #0
 8000318:	d148      	bne.n	80003ac <__udivmoddi4+0x158>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd0>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80fb 	bhi.w	800051a <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469c      	mov	ip, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa0>
 8000332:	e9c6 4c00 	strd	r4, ip, [r6]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xe8>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 808f 	bne.w	8000464 <__udivmoddi4+0x210>
 8000346:	2701      	movs	r7, #1
 8000348:	1b49      	subs	r1, r1, r5
 800034a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800034e:	fa1f f985 	uxth.w	r9, r5
 8000352:	fbb1 fef8 	udiv	lr, r1, r8
 8000356:	fb08 111e 	mls	r1, r8, lr, r1
 800035a:	fb09 f00e 	mul.w	r0, r9, lr
 800035e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000362:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000366:	4298      	cmp	r0, r3
 8000368:	d907      	bls.n	800037a <__udivmoddi4+0x126>
 800036a:	18eb      	adds	r3, r5, r3
 800036c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x124>
 8000372:	4298      	cmp	r0, r3
 8000374:	f200 80cd 	bhi.w	8000512 <__udivmoddi4+0x2be>
 8000378:	468e      	mov	lr, r1
 800037a:	1a1b      	subs	r3, r3, r0
 800037c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000380:	fb08 3310 	mls	r3, r8, r0, r3
 8000384:	fb09 f900 	mul.w	r9, r9, r0
 8000388:	b2a4      	uxth	r4, r4
 800038a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038e:	45a1      	cmp	r9, r4
 8000390:	d907      	bls.n	80003a2 <__udivmoddi4+0x14e>
 8000392:	192c      	adds	r4, r5, r4
 8000394:	f100 33ff 	add.w	r3, r0, #4294967295
 8000398:	d202      	bcs.n	80003a0 <__udivmoddi4+0x14c>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f200 80b6 	bhi.w	800050c <__udivmoddi4+0x2b8>
 80003a0:	4618      	mov	r0, r3
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80003aa:	e79e      	b.n	80002ea <__udivmoddi4+0x96>
 80003ac:	f1c7 0520 	rsb	r5, r7, #32
 80003b0:	40bb      	lsls	r3, r7
 80003b2:	fa22 fc05 	lsr.w	ip, r2, r5
 80003b6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ba:	fa21 f405 	lsr.w	r4, r1, r5
 80003be:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003c2:	fbb4 f9fe 	udiv	r9, r4, lr
 80003c6:	fa1f f88c 	uxth.w	r8, ip
 80003ca:	fb0e 4419 	mls	r4, lr, r9, r4
 80003ce:	fa20 f305 	lsr.w	r3, r0, r5
 80003d2:	40b9      	lsls	r1, r7
 80003d4:	fb09 fa08 	mul.w	sl, r9, r8
 80003d8:	4319      	orrs	r1, r3
 80003da:	0c0b      	lsrs	r3, r1, #16
 80003dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	fa02 f207 	lsl.w	r2, r2, r7
 80003e6:	fa00 f307 	lsl.w	r3, r0, r7
 80003ea:	d90b      	bls.n	8000404 <__udivmoddi4+0x1b0>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f4:	f080 8088 	bcs.w	8000508 <__udivmoddi4+0x2b4>
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	f240 8085 	bls.w	8000508 <__udivmoddi4+0x2b4>
 80003fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000402:	4464      	add	r4, ip
 8000404:	eba4 040a 	sub.w	r4, r4, sl
 8000408:	fbb4 f0fe 	udiv	r0, r4, lr
 800040c:	fb0e 4410 	mls	r4, lr, r0, r4
 8000410:	fb00 fa08 	mul.w	sl, r0, r8
 8000414:	b289      	uxth	r1, r1
 8000416:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800041a:	45a2      	cmp	sl, r4
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x1dc>
 800041e:	eb1c 0404 	adds.w	r4, ip, r4
 8000422:	f100 31ff 	add.w	r1, r0, #4294967295
 8000426:	d26b      	bcs.n	8000500 <__udivmoddi4+0x2ac>
 8000428:	45a2      	cmp	sl, r4
 800042a:	d969      	bls.n	8000500 <__udivmoddi4+0x2ac>
 800042c:	3802      	subs	r0, #2
 800042e:	4464      	add	r4, ip
 8000430:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000434:	fba0 8902 	umull	r8, r9, r0, r2
 8000438:	eba4 040a 	sub.w	r4, r4, sl
 800043c:	454c      	cmp	r4, r9
 800043e:	4641      	mov	r1, r8
 8000440:	46ce      	mov	lr, r9
 8000442:	d354      	bcc.n	80004ee <__udivmoddi4+0x29a>
 8000444:	d051      	beq.n	80004ea <__udivmoddi4+0x296>
 8000446:	2e00      	cmp	r6, #0
 8000448:	d069      	beq.n	800051e <__udivmoddi4+0x2ca>
 800044a:	1a5a      	subs	r2, r3, r1
 800044c:	eb64 040e 	sbc.w	r4, r4, lr
 8000450:	fa04 f505 	lsl.w	r5, r4, r5
 8000454:	fa22 f307 	lsr.w	r3, r2, r7
 8000458:	40fc      	lsrs	r4, r7
 800045a:	431d      	orrs	r5, r3
 800045c:	e9c6 5400 	strd	r5, r4, [r6]
 8000460:	2700      	movs	r7, #0
 8000462:	e747      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000464:	4095      	lsls	r5, r2
 8000466:	f1c2 0320 	rsb	r3, r2, #32
 800046a:	fa21 f003 	lsr.w	r0, r1, r3
 800046e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000472:	fbb0 f7f8 	udiv	r7, r0, r8
 8000476:	fa1f f985 	uxth.w	r9, r5
 800047a:	fb08 0017 	mls	r0, r8, r7, r0
 800047e:	fa24 f303 	lsr.w	r3, r4, r3
 8000482:	4091      	lsls	r1, r2
 8000484:	fb07 fc09 	mul.w	ip, r7, r9
 8000488:	430b      	orrs	r3, r1
 800048a:	0c19      	lsrs	r1, r3, #16
 800048c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000490:	458c      	cmp	ip, r1
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d907      	bls.n	80004a8 <__udivmoddi4+0x254>
 8000498:	1869      	adds	r1, r5, r1
 800049a:	f107 30ff 	add.w	r0, r7, #4294967295
 800049e:	d231      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004a0:	458c      	cmp	ip, r1
 80004a2:	d92f      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004a4:	3f02      	subs	r7, #2
 80004a6:	4429      	add	r1, r5
 80004a8:	eba1 010c 	sub.w	r1, r1, ip
 80004ac:	fbb1 f0f8 	udiv	r0, r1, r8
 80004b0:	fb08 1c10 	mls	ip, r8, r0, r1
 80004b4:	fb00 fe09 	mul.w	lr, r0, r9
 80004b8:	b299      	uxth	r1, r3
 80004ba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004be:	458e      	cmp	lr, r1
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x27e>
 80004c2:	1869      	adds	r1, r5, r1
 80004c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c8:	d218      	bcs.n	80004fc <__udivmoddi4+0x2a8>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d916      	bls.n	80004fc <__udivmoddi4+0x2a8>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4429      	add	r1, r5
 80004d2:	eba1 010e 	sub.w	r1, r1, lr
 80004d6:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004da:	e73a      	b.n	8000352 <__udivmoddi4+0xfe>
 80004dc:	4637      	mov	r7, r6
 80004de:	4630      	mov	r0, r6
 80004e0:	e708      	b.n	80002f4 <__udivmoddi4+0xa0>
 80004e2:	460f      	mov	r7, r1
 80004e4:	e6e6      	b.n	80002b4 <__udivmoddi4+0x60>
 80004e6:	4618      	mov	r0, r3
 80004e8:	e6fb      	b.n	80002e2 <__udivmoddi4+0x8e>
 80004ea:	4543      	cmp	r3, r8
 80004ec:	d2ab      	bcs.n	8000446 <__udivmoddi4+0x1f2>
 80004ee:	ebb8 0102 	subs.w	r1, r8, r2
 80004f2:	eb69 020c 	sbc.w	r2, r9, ip
 80004f6:	3801      	subs	r0, #1
 80004f8:	4696      	mov	lr, r2
 80004fa:	e7a4      	b.n	8000446 <__udivmoddi4+0x1f2>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e7e8      	b.n	80004d2 <__udivmoddi4+0x27e>
 8000500:	4608      	mov	r0, r1
 8000502:	e795      	b.n	8000430 <__udivmoddi4+0x1dc>
 8000504:	4607      	mov	r7, r0
 8000506:	e7cf      	b.n	80004a8 <__udivmoddi4+0x254>
 8000508:	4681      	mov	r9, r0
 800050a:	e77b      	b.n	8000404 <__udivmoddi4+0x1b0>
 800050c:	3802      	subs	r0, #2
 800050e:	442c      	add	r4, r5
 8000510:	e747      	b.n	80003a2 <__udivmoddi4+0x14e>
 8000512:	f1ae 0e02 	sub.w	lr, lr, #2
 8000516:	442b      	add	r3, r5
 8000518:	e72f      	b.n	800037a <__udivmoddi4+0x126>
 800051a:	4638      	mov	r0, r7
 800051c:	e707      	b.n	800032e <__udivmoddi4+0xda>
 800051e:	4637      	mov	r7, r6
 8000520:	e6e8      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <HAL_Init+0x28>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a07      	ldr	r2, [pc, #28]	; (8000550 <HAL_Init+0x28>)
 8000532:	f043 0310 	orr.w	r3, r3, #16
 8000536:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000538:	2003      	movs	r0, #3
 800053a:	f000 f945 	bl	80007c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800053e:	2000      	movs	r0, #0
 8000540:	f000 f808 	bl	8000554 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000544:	f002 fb50 	bl	8002be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000548:	2300      	movs	r3, #0
}
 800054a:	4618      	mov	r0, r3
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40022000 	.word	0x40022000

08000554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800055c:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <HAL_InitTick+0x54>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_InitTick+0x58>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4619      	mov	r1, r3
 8000566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056a:	fbb3 f3f1 	udiv	r3, r3, r1
 800056e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f95d 	bl	8000832 <HAL_SYSTICK_Config>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800057e:	2301      	movs	r3, #1
 8000580:	e00e      	b.n	80005a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2b0f      	cmp	r3, #15
 8000586:	d80a      	bhi.n	800059e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000588:	2200      	movs	r2, #0
 800058a:	6879      	ldr	r1, [r7, #4]
 800058c:	f04f 30ff 	mov.w	r0, #4294967295
 8000590:	f000 f925 	bl	80007de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <HAL_InitTick+0x5c>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800059a:	2300      	movs	r3, #0
 800059c:	e000      	b.n	80005a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800059e:	2301      	movs	r3, #1
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000008 	.word	0x20000008
 80005ac:	20000004 	.word	0x20000004
 80005b0:	20000000 	.word	0x20000000

080005b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <HAL_IncTick+0x1c>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <HAL_IncTick+0x20>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4413      	add	r3, r2
 80005c4:	4a03      	ldr	r2, [pc, #12]	; (80005d4 <HAL_IncTick+0x20>)
 80005c6:	6013      	str	r3, [r2, #0]
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr
 80005d0:	20000004 	.word	0x20000004
 80005d4:	20000028 	.word	0x20000028

080005d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  return uwTick;
 80005dc:	4b02      	ldr	r3, [pc, #8]	; (80005e8 <HAL_GetTick+0x10>)
 80005de:	681b      	ldr	r3, [r3, #0]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr
 80005e8:	20000028 	.word	0x20000028

080005ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005f4:	f7ff fff0 	bl	80005d8 <HAL_GetTick>
 80005f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000604:	d005      	beq.n	8000612 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000606:	4b09      	ldr	r3, [pc, #36]	; (800062c <HAL_Delay+0x40>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	461a      	mov	r2, r3
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	4413      	add	r3, r2
 8000610:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000612:	bf00      	nop
 8000614:	f7ff ffe0 	bl	80005d8 <HAL_GetTick>
 8000618:	4602      	mov	r2, r0
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	1ad3      	subs	r3, r2, r3
 800061e:	68fa      	ldr	r2, [r7, #12]
 8000620:	429a      	cmp	r2, r3
 8000622:	d8f7      	bhi.n	8000614 <HAL_Delay+0x28>
  {
  }
}
 8000624:	bf00      	nop
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000004 	.word	0x20000004

08000630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f003 0307 	and.w	r3, r3, #7
 800063e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <__NVIC_SetPriorityGrouping+0x44>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000646:	68ba      	ldr	r2, [r7, #8]
 8000648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800064c:	4013      	ands	r3, r2
 800064e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800065c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000662:	4a04      	ldr	r2, [pc, #16]	; (8000674 <__NVIC_SetPriorityGrouping+0x44>)
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	60d3      	str	r3, [r2, #12]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800067c:	4b04      	ldr	r3, [pc, #16]	; (8000690 <__NVIC_GetPriorityGrouping+0x18>)
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	0a1b      	lsrs	r3, r3, #8
 8000682:	f003 0307 	and.w	r3, r3, #7
}
 8000686:	4618      	mov	r0, r3
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	db0b      	blt.n	80006be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	f003 021f 	and.w	r2, r3, #31
 80006ac:	4906      	ldr	r1, [pc, #24]	; (80006c8 <__NVIC_EnableIRQ+0x34>)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	095b      	lsrs	r3, r3, #5
 80006b4:	2001      	movs	r0, #1
 80006b6:	fa00 f202 	lsl.w	r2, r0, r2
 80006ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr
 80006c8:	e000e100 	.word	0xe000e100

080006cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	6039      	str	r1, [r7, #0]
 80006d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	db0a      	blt.n	80006f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	490c      	ldr	r1, [pc, #48]	; (8000718 <__NVIC_SetPriority+0x4c>)
 80006e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ea:	0112      	lsls	r2, r2, #4
 80006ec:	b2d2      	uxtb	r2, r2
 80006ee:	440b      	add	r3, r1
 80006f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f4:	e00a      	b.n	800070c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4908      	ldr	r1, [pc, #32]	; (800071c <__NVIC_SetPriority+0x50>)
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	f003 030f 	and.w	r3, r3, #15
 8000702:	3b04      	subs	r3, #4
 8000704:	0112      	lsls	r2, r2, #4
 8000706:	b2d2      	uxtb	r2, r2
 8000708:	440b      	add	r3, r1
 800070a:	761a      	strb	r2, [r3, #24]
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	e000e100 	.word	0xe000e100
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000720:	b480      	push	{r7}
 8000722:	b089      	sub	sp, #36	; 0x24
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	f003 0307 	and.w	r3, r3, #7
 8000732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000734:	69fb      	ldr	r3, [r7, #28]
 8000736:	f1c3 0307 	rsb	r3, r3, #7
 800073a:	2b04      	cmp	r3, #4
 800073c:	bf28      	it	cs
 800073e:	2304      	movcs	r3, #4
 8000740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	3304      	adds	r3, #4
 8000746:	2b06      	cmp	r3, #6
 8000748:	d902      	bls.n	8000750 <NVIC_EncodePriority+0x30>
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	3b03      	subs	r3, #3
 800074e:	e000      	b.n	8000752 <NVIC_EncodePriority+0x32>
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000754:	f04f 32ff 	mov.w	r2, #4294967295
 8000758:	69bb      	ldr	r3, [r7, #24]
 800075a:	fa02 f303 	lsl.w	r3, r2, r3
 800075e:	43da      	mvns	r2, r3
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	401a      	ands	r2, r3
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000768:	f04f 31ff 	mov.w	r1, #4294967295
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	fa01 f303 	lsl.w	r3, r1, r3
 8000772:	43d9      	mvns	r1, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000778:	4313      	orrs	r3, r2
         );
}
 800077a:	4618      	mov	r0, r3
 800077c:	3724      	adds	r7, #36	; 0x24
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr

08000784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	3b01      	subs	r3, #1
 8000790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000794:	d301      	bcc.n	800079a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000796:	2301      	movs	r3, #1
 8000798:	e00f      	b.n	80007ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800079a:	4a0a      	ldr	r2, [pc, #40]	; (80007c4 <SysTick_Config+0x40>)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3b01      	subs	r3, #1
 80007a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007a2:	210f      	movs	r1, #15
 80007a4:	f04f 30ff 	mov.w	r0, #4294967295
 80007a8:	f7ff ff90 	bl	80006cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <SysTick_Config+0x40>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007b2:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <SysTick_Config+0x40>)
 80007b4:	2207      	movs	r2, #7
 80007b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007b8:	2300      	movs	r3, #0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	e000e010 	.word	0xe000e010

080007c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f7ff ff2d 	bl	8000630 <__NVIC_SetPriorityGrouping>
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007de:	b580      	push	{r7, lr}
 80007e0:	b086      	sub	sp, #24
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	4603      	mov	r3, r0
 80007e6:	60b9      	str	r1, [r7, #8]
 80007e8:	607a      	str	r2, [r7, #4]
 80007ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007f0:	f7ff ff42 	bl	8000678 <__NVIC_GetPriorityGrouping>
 80007f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	68b9      	ldr	r1, [r7, #8]
 80007fa:	6978      	ldr	r0, [r7, #20]
 80007fc:	f7ff ff90 	bl	8000720 <NVIC_EncodePriority>
 8000800:	4602      	mov	r2, r0
 8000802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000806:	4611      	mov	r1, r2
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ff5f 	bl	80006cc <__NVIC_SetPriority>
}
 800080e:	bf00      	nop
 8000810:	3718      	adds	r7, #24
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	4603      	mov	r3, r0
 800081e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ff35 	bl	8000694 <__NVIC_EnableIRQ>
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b082      	sub	sp, #8
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f7ff ffa2 	bl	8000784 <SysTick_Config>
 8000840:	4603      	mov	r3, r0
}
 8000842:	4618      	mov	r0, r3
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
	...

0800084c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d101      	bne.n	8000862 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800085e:	2301      	movs	r3, #1
 8000860:	e059      	b.n	8000916 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	461a      	mov	r2, r3
 8000868:	4b2d      	ldr	r3, [pc, #180]	; (8000920 <HAL_DMA_Init+0xd4>)
 800086a:	429a      	cmp	r2, r3
 800086c:	d80f      	bhi.n	800088e <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	461a      	mov	r2, r3
 8000874:	4b2b      	ldr	r3, [pc, #172]	; (8000924 <HAL_DMA_Init+0xd8>)
 8000876:	4413      	add	r3, r2
 8000878:	4a2b      	ldr	r2, [pc, #172]	; (8000928 <HAL_DMA_Init+0xdc>)
 800087a:	fba2 2303 	umull	r2, r3, r2, r3
 800087e:	091b      	lsrs	r3, r3, #4
 8000880:	009a      	lsls	r2, r3, #2
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4a28      	ldr	r2, [pc, #160]	; (800092c <HAL_DMA_Init+0xe0>)
 800088a:	63da      	str	r2, [r3, #60]	; 0x3c
 800088c:	e00e      	b.n	80008ac <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	461a      	mov	r2, r3
 8000894:	4b26      	ldr	r3, [pc, #152]	; (8000930 <HAL_DMA_Init+0xe4>)
 8000896:	4413      	add	r3, r2
 8000898:	4a23      	ldr	r2, [pc, #140]	; (8000928 <HAL_DMA_Init+0xdc>)
 800089a:	fba2 2303 	umull	r2, r3, r2, r3
 800089e:	091b      	lsrs	r3, r3, #4
 80008a0:	009a      	lsls	r2, r3, #2
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4a22      	ldr	r2, [pc, #136]	; (8000934 <HAL_DMA_Init+0xe8>)
 80008aa:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2202      	movs	r2, #2
 80008b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80008c2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80008c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80008d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	68db      	ldr	r3, [r3, #12]
 80008d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80008f0:	68fa      	ldr	r2, [r7, #12]
 80008f2:	4313      	orrs	r3, r2
 80008f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	68fa      	ldr	r2, [r7, #12]
 80008fc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2200      	movs	r2, #0
 8000902:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2201      	movs	r2, #1
 8000908:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2200      	movs	r2, #0
 8000910:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000914:	2300      	movs	r3, #0
}
 8000916:	4618      	mov	r0, r3
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr
 8000920:	40020407 	.word	0x40020407
 8000924:	bffdfff8 	.word	0xbffdfff8
 8000928:	cccccccd 	.word	0xcccccccd
 800092c:	40020000 	.word	0x40020000
 8000930:	bffdfbf8 	.word	0xbffdfbf8
 8000934:	40020400 	.word	0x40020400

08000938 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
 8000944:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000946:	2300      	movs	r3, #0
 8000948:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000950:	2b01      	cmp	r3, #1
 8000952:	d101      	bne.n	8000958 <HAL_DMA_Start_IT+0x20>
 8000954:	2302      	movs	r3, #2
 8000956:	e04a      	b.n	80009ee <HAL_DMA_Start_IT+0xb6>
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	2201      	movs	r2, #1
 800095c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000966:	2b01      	cmp	r3, #1
 8000968:	d13a      	bne.n	80009e0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	2202      	movs	r2, #2
 800096e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	2200      	movs	r2, #0
 8000976:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f022 0201 	bic.w	r2, r2, #1
 8000986:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	68b9      	ldr	r1, [r7, #8]
 800098e:	68f8      	ldr	r0, [r7, #12]
 8000990:	f000 fa6e 	bl	8000e70 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000998:	2b00      	cmp	r3, #0
 800099a:	d008      	beq.n	80009ae <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f042 020e 	orr.w	r2, r2, #14
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	e00f      	b.n	80009ce <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f022 0204 	bic.w	r2, r2, #4
 80009bc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f042 020a 	orr.w	r2, r2, #10
 80009cc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f042 0201 	orr.w	r2, r2, #1
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	e005      	b.n	80009ec <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	2200      	movs	r2, #0
 80009e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80009e8:	2302      	movs	r3, #2
 80009ea:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80009ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3718      	adds	r7, #24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a14:	2204      	movs	r2, #4
 8000a16:	409a      	lsls	r2, r3
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	f000 80d6 	beq.w	8000bce <HAL_DMA_IRQHandler+0x1d6>
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	f003 0304 	and.w	r3, r3, #4
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	f000 80d0 	beq.w	8000bce <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f003 0320 	and.w	r3, r3, #32
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d107      	bne.n	8000a4c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f022 0204 	bic.w	r2, r2, #4
 8000a4a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b9b      	ldr	r3, [pc, #620]	; (8000cc0 <HAL_DMA_IRQHandler+0x2c8>)
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d958      	bls.n	8000b0a <HAL_DMA_IRQHandler+0x112>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a99      	ldr	r2, [pc, #612]	; (8000cc4 <HAL_DMA_IRQHandler+0x2cc>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d04f      	beq.n	8000b02 <HAL_DMA_IRQHandler+0x10a>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a98      	ldr	r2, [pc, #608]	; (8000cc8 <HAL_DMA_IRQHandler+0x2d0>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d048      	beq.n	8000afe <HAL_DMA_IRQHandler+0x106>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a96      	ldr	r2, [pc, #600]	; (8000ccc <HAL_DMA_IRQHandler+0x2d4>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d040      	beq.n	8000af8 <HAL_DMA_IRQHandler+0x100>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a95      	ldr	r2, [pc, #596]	; (8000cd0 <HAL_DMA_IRQHandler+0x2d8>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d038      	beq.n	8000af2 <HAL_DMA_IRQHandler+0xfa>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a93      	ldr	r2, [pc, #588]	; (8000cd4 <HAL_DMA_IRQHandler+0x2dc>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d030      	beq.n	8000aec <HAL_DMA_IRQHandler+0xf4>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a92      	ldr	r2, [pc, #584]	; (8000cd8 <HAL_DMA_IRQHandler+0x2e0>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d028      	beq.n	8000ae6 <HAL_DMA_IRQHandler+0xee>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a89      	ldr	r2, [pc, #548]	; (8000cc0 <HAL_DMA_IRQHandler+0x2c8>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d020      	beq.n	8000ae0 <HAL_DMA_IRQHandler+0xe8>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a8e      	ldr	r2, [pc, #568]	; (8000cdc <HAL_DMA_IRQHandler+0x2e4>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d019      	beq.n	8000adc <HAL_DMA_IRQHandler+0xe4>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a8c      	ldr	r2, [pc, #560]	; (8000ce0 <HAL_DMA_IRQHandler+0x2e8>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d012      	beq.n	8000ad8 <HAL_DMA_IRQHandler+0xe0>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a8b      	ldr	r2, [pc, #556]	; (8000ce4 <HAL_DMA_IRQHandler+0x2ec>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d00a      	beq.n	8000ad2 <HAL_DMA_IRQHandler+0xda>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a89      	ldr	r2, [pc, #548]	; (8000ce8 <HAL_DMA_IRQHandler+0x2f0>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d102      	bne.n	8000acc <HAL_DMA_IRQHandler+0xd4>
 8000ac6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000aca:	e01b      	b.n	8000b04 <HAL_DMA_IRQHandler+0x10c>
 8000acc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000ad0:	e018      	b.n	8000b04 <HAL_DMA_IRQHandler+0x10c>
 8000ad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ad6:	e015      	b.n	8000b04 <HAL_DMA_IRQHandler+0x10c>
 8000ad8:	2340      	movs	r3, #64	; 0x40
 8000ada:	e013      	b.n	8000b04 <HAL_DMA_IRQHandler+0x10c>
 8000adc:	2304      	movs	r3, #4
 8000ade:	e011      	b.n	8000b04 <HAL_DMA_IRQHandler+0x10c>
 8000ae0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000ae4:	e00e      	b.n	8000b04 <HAL_DMA_IRQHandler+0x10c>
 8000ae6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aea:	e00b      	b.n	8000b04 <HAL_DMA_IRQHandler+0x10c>
 8000aec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000af0:	e008      	b.n	8000b04 <HAL_DMA_IRQHandler+0x10c>
 8000af2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000af6:	e005      	b.n	8000b04 <HAL_DMA_IRQHandler+0x10c>
 8000af8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000afc:	e002      	b.n	8000b04 <HAL_DMA_IRQHandler+0x10c>
 8000afe:	2340      	movs	r3, #64	; 0x40
 8000b00:	e000      	b.n	8000b04 <HAL_DMA_IRQHandler+0x10c>
 8000b02:	2304      	movs	r3, #4
 8000b04:	4a79      	ldr	r2, [pc, #484]	; (8000cec <HAL_DMA_IRQHandler+0x2f4>)
 8000b06:	6053      	str	r3, [r2, #4]
 8000b08:	e057      	b.n	8000bba <HAL_DMA_IRQHandler+0x1c2>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a6d      	ldr	r2, [pc, #436]	; (8000cc4 <HAL_DMA_IRQHandler+0x2cc>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d04f      	beq.n	8000bb4 <HAL_DMA_IRQHandler+0x1bc>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a6b      	ldr	r2, [pc, #428]	; (8000cc8 <HAL_DMA_IRQHandler+0x2d0>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d048      	beq.n	8000bb0 <HAL_DMA_IRQHandler+0x1b8>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a6a      	ldr	r2, [pc, #424]	; (8000ccc <HAL_DMA_IRQHandler+0x2d4>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d040      	beq.n	8000baa <HAL_DMA_IRQHandler+0x1b2>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a68      	ldr	r2, [pc, #416]	; (8000cd0 <HAL_DMA_IRQHandler+0x2d8>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d038      	beq.n	8000ba4 <HAL_DMA_IRQHandler+0x1ac>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a67      	ldr	r2, [pc, #412]	; (8000cd4 <HAL_DMA_IRQHandler+0x2dc>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d030      	beq.n	8000b9e <HAL_DMA_IRQHandler+0x1a6>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a65      	ldr	r2, [pc, #404]	; (8000cd8 <HAL_DMA_IRQHandler+0x2e0>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d028      	beq.n	8000b98 <HAL_DMA_IRQHandler+0x1a0>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a5d      	ldr	r2, [pc, #372]	; (8000cc0 <HAL_DMA_IRQHandler+0x2c8>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d020      	beq.n	8000b92 <HAL_DMA_IRQHandler+0x19a>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a61      	ldr	r2, [pc, #388]	; (8000cdc <HAL_DMA_IRQHandler+0x2e4>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d019      	beq.n	8000b8e <HAL_DMA_IRQHandler+0x196>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a60      	ldr	r2, [pc, #384]	; (8000ce0 <HAL_DMA_IRQHandler+0x2e8>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d012      	beq.n	8000b8a <HAL_DMA_IRQHandler+0x192>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a5e      	ldr	r2, [pc, #376]	; (8000ce4 <HAL_DMA_IRQHandler+0x2ec>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d00a      	beq.n	8000b84 <HAL_DMA_IRQHandler+0x18c>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a5d      	ldr	r2, [pc, #372]	; (8000ce8 <HAL_DMA_IRQHandler+0x2f0>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d102      	bne.n	8000b7e <HAL_DMA_IRQHandler+0x186>
 8000b78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b7c:	e01b      	b.n	8000bb6 <HAL_DMA_IRQHandler+0x1be>
 8000b7e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000b82:	e018      	b.n	8000bb6 <HAL_DMA_IRQHandler+0x1be>
 8000b84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b88:	e015      	b.n	8000bb6 <HAL_DMA_IRQHandler+0x1be>
 8000b8a:	2340      	movs	r3, #64	; 0x40
 8000b8c:	e013      	b.n	8000bb6 <HAL_DMA_IRQHandler+0x1be>
 8000b8e:	2304      	movs	r3, #4
 8000b90:	e011      	b.n	8000bb6 <HAL_DMA_IRQHandler+0x1be>
 8000b92:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000b96:	e00e      	b.n	8000bb6 <HAL_DMA_IRQHandler+0x1be>
 8000b98:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b9c:	e00b      	b.n	8000bb6 <HAL_DMA_IRQHandler+0x1be>
 8000b9e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000ba2:	e008      	b.n	8000bb6 <HAL_DMA_IRQHandler+0x1be>
 8000ba4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ba8:	e005      	b.n	8000bb6 <HAL_DMA_IRQHandler+0x1be>
 8000baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bae:	e002      	b.n	8000bb6 <HAL_DMA_IRQHandler+0x1be>
 8000bb0:	2340      	movs	r3, #64	; 0x40
 8000bb2:	e000      	b.n	8000bb6 <HAL_DMA_IRQHandler+0x1be>
 8000bb4:	2304      	movs	r3, #4
 8000bb6:	4a4e      	ldr	r2, [pc, #312]	; (8000cf0 <HAL_DMA_IRQHandler+0x2f8>)
 8000bb8:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	f000 8136 	beq.w	8000e30 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000bcc:	e130      	b.n	8000e30 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	409a      	lsls	r2, r3
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	f000 80f8 	beq.w	8000dd0 <HAL_DMA_IRQHandler+0x3d8>
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f000 80f2 	beq.w	8000dd0 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f003 0320 	and.w	r3, r3, #32
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d10b      	bne.n	8000c12 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f022 020a 	bic.w	r2, r2, #10
 8000c08:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	461a      	mov	r2, r3
 8000c18:	4b29      	ldr	r3, [pc, #164]	; (8000cc0 <HAL_DMA_IRQHandler+0x2c8>)
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d973      	bls.n	8000d06 <HAL_DMA_IRQHandler+0x30e>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a28      	ldr	r2, [pc, #160]	; (8000cc4 <HAL_DMA_IRQHandler+0x2cc>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d06a      	beq.n	8000cfe <HAL_DMA_IRQHandler+0x306>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a26      	ldr	r2, [pc, #152]	; (8000cc8 <HAL_DMA_IRQHandler+0x2d0>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d063      	beq.n	8000cfa <HAL_DMA_IRQHandler+0x302>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a25      	ldr	r2, [pc, #148]	; (8000ccc <HAL_DMA_IRQHandler+0x2d4>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d05b      	beq.n	8000cf4 <HAL_DMA_IRQHandler+0x2fc>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a23      	ldr	r2, [pc, #140]	; (8000cd0 <HAL_DMA_IRQHandler+0x2d8>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d038      	beq.n	8000cb8 <HAL_DMA_IRQHandler+0x2c0>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a22      	ldr	r2, [pc, #136]	; (8000cd4 <HAL_DMA_IRQHandler+0x2dc>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d030      	beq.n	8000cb2 <HAL_DMA_IRQHandler+0x2ba>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a20      	ldr	r2, [pc, #128]	; (8000cd8 <HAL_DMA_IRQHandler+0x2e0>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d028      	beq.n	8000cac <HAL_DMA_IRQHandler+0x2b4>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a18      	ldr	r2, [pc, #96]	; (8000cc0 <HAL_DMA_IRQHandler+0x2c8>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d020      	beq.n	8000ca6 <HAL_DMA_IRQHandler+0x2ae>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a1c      	ldr	r2, [pc, #112]	; (8000cdc <HAL_DMA_IRQHandler+0x2e4>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d019      	beq.n	8000ca2 <HAL_DMA_IRQHandler+0x2aa>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a1b      	ldr	r2, [pc, #108]	; (8000ce0 <HAL_DMA_IRQHandler+0x2e8>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d012      	beq.n	8000c9e <HAL_DMA_IRQHandler+0x2a6>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a19      	ldr	r2, [pc, #100]	; (8000ce4 <HAL_DMA_IRQHandler+0x2ec>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d00a      	beq.n	8000c98 <HAL_DMA_IRQHandler+0x2a0>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a18      	ldr	r2, [pc, #96]	; (8000ce8 <HAL_DMA_IRQHandler+0x2f0>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d102      	bne.n	8000c92 <HAL_DMA_IRQHandler+0x29a>
 8000c8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c90:	e036      	b.n	8000d00 <HAL_DMA_IRQHandler+0x308>
 8000c92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c96:	e033      	b.n	8000d00 <HAL_DMA_IRQHandler+0x308>
 8000c98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c9c:	e030      	b.n	8000d00 <HAL_DMA_IRQHandler+0x308>
 8000c9e:	2320      	movs	r3, #32
 8000ca0:	e02e      	b.n	8000d00 <HAL_DMA_IRQHandler+0x308>
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	e02c      	b.n	8000d00 <HAL_DMA_IRQHandler+0x308>
 8000ca6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000caa:	e029      	b.n	8000d00 <HAL_DMA_IRQHandler+0x308>
 8000cac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000cb0:	e026      	b.n	8000d00 <HAL_DMA_IRQHandler+0x308>
 8000cb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cb6:	e023      	b.n	8000d00 <HAL_DMA_IRQHandler+0x308>
 8000cb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cbc:	e020      	b.n	8000d00 <HAL_DMA_IRQHandler+0x308>
 8000cbe:	bf00      	nop
 8000cc0:	40020080 	.word	0x40020080
 8000cc4:	40020008 	.word	0x40020008
 8000cc8:	4002001c 	.word	0x4002001c
 8000ccc:	40020030 	.word	0x40020030
 8000cd0:	40020044 	.word	0x40020044
 8000cd4:	40020058 	.word	0x40020058
 8000cd8:	4002006c 	.word	0x4002006c
 8000cdc:	40020408 	.word	0x40020408
 8000ce0:	4002041c 	.word	0x4002041c
 8000ce4:	40020430 	.word	0x40020430
 8000ce8:	40020444 	.word	0x40020444
 8000cec:	40020400 	.word	0x40020400
 8000cf0:	40020000 	.word	0x40020000
 8000cf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cf8:	e002      	b.n	8000d00 <HAL_DMA_IRQHandler+0x308>
 8000cfa:	2320      	movs	r3, #32
 8000cfc:	e000      	b.n	8000d00 <HAL_DMA_IRQHandler+0x308>
 8000cfe:	2302      	movs	r3, #2
 8000d00:	4a4e      	ldr	r2, [pc, #312]	; (8000e3c <HAL_DMA_IRQHandler+0x444>)
 8000d02:	6053      	str	r3, [r2, #4]
 8000d04:	e057      	b.n	8000db6 <HAL_DMA_IRQHandler+0x3be>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a4d      	ldr	r2, [pc, #308]	; (8000e40 <HAL_DMA_IRQHandler+0x448>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d04f      	beq.n	8000db0 <HAL_DMA_IRQHandler+0x3b8>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a4b      	ldr	r2, [pc, #300]	; (8000e44 <HAL_DMA_IRQHandler+0x44c>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d048      	beq.n	8000dac <HAL_DMA_IRQHandler+0x3b4>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a4a      	ldr	r2, [pc, #296]	; (8000e48 <HAL_DMA_IRQHandler+0x450>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d040      	beq.n	8000da6 <HAL_DMA_IRQHandler+0x3ae>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a48      	ldr	r2, [pc, #288]	; (8000e4c <HAL_DMA_IRQHandler+0x454>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d038      	beq.n	8000da0 <HAL_DMA_IRQHandler+0x3a8>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a47      	ldr	r2, [pc, #284]	; (8000e50 <HAL_DMA_IRQHandler+0x458>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d030      	beq.n	8000d9a <HAL_DMA_IRQHandler+0x3a2>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a45      	ldr	r2, [pc, #276]	; (8000e54 <HAL_DMA_IRQHandler+0x45c>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d028      	beq.n	8000d94 <HAL_DMA_IRQHandler+0x39c>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a44      	ldr	r2, [pc, #272]	; (8000e58 <HAL_DMA_IRQHandler+0x460>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d020      	beq.n	8000d8e <HAL_DMA_IRQHandler+0x396>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a42      	ldr	r2, [pc, #264]	; (8000e5c <HAL_DMA_IRQHandler+0x464>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d019      	beq.n	8000d8a <HAL_DMA_IRQHandler+0x392>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a41      	ldr	r2, [pc, #260]	; (8000e60 <HAL_DMA_IRQHandler+0x468>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d012      	beq.n	8000d86 <HAL_DMA_IRQHandler+0x38e>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a3f      	ldr	r2, [pc, #252]	; (8000e64 <HAL_DMA_IRQHandler+0x46c>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d00a      	beq.n	8000d80 <HAL_DMA_IRQHandler+0x388>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a3e      	ldr	r2, [pc, #248]	; (8000e68 <HAL_DMA_IRQHandler+0x470>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d102      	bne.n	8000d7a <HAL_DMA_IRQHandler+0x382>
 8000d74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d78:	e01b      	b.n	8000db2 <HAL_DMA_IRQHandler+0x3ba>
 8000d7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d7e:	e018      	b.n	8000db2 <HAL_DMA_IRQHandler+0x3ba>
 8000d80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d84:	e015      	b.n	8000db2 <HAL_DMA_IRQHandler+0x3ba>
 8000d86:	2320      	movs	r3, #32
 8000d88:	e013      	b.n	8000db2 <HAL_DMA_IRQHandler+0x3ba>
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	e011      	b.n	8000db2 <HAL_DMA_IRQHandler+0x3ba>
 8000d8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d92:	e00e      	b.n	8000db2 <HAL_DMA_IRQHandler+0x3ba>
 8000d94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000d98:	e00b      	b.n	8000db2 <HAL_DMA_IRQHandler+0x3ba>
 8000d9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d9e:	e008      	b.n	8000db2 <HAL_DMA_IRQHandler+0x3ba>
 8000da0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000da4:	e005      	b.n	8000db2 <HAL_DMA_IRQHandler+0x3ba>
 8000da6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000daa:	e002      	b.n	8000db2 <HAL_DMA_IRQHandler+0x3ba>
 8000dac:	2320      	movs	r3, #32
 8000dae:	e000      	b.n	8000db2 <HAL_DMA_IRQHandler+0x3ba>
 8000db0:	2302      	movs	r3, #2
 8000db2:	4a2e      	ldr	r2, [pc, #184]	; (8000e6c <HAL_DMA_IRQHandler+0x474>)
 8000db4:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2200      	movs	r2, #0
 8000dba:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d034      	beq.n	8000e30 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000dce:	e02f      	b.n	8000e30 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd4:	2208      	movs	r2, #8
 8000dd6:	409a      	lsls	r2, r3
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d028      	beq.n	8000e32 <HAL_DMA_IRQHandler+0x43a>
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	f003 0308 	and.w	r3, r3, #8
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d023      	beq.n	8000e32 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f022 020e 	bic.w	r2, r2, #14
 8000df8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e02:	2101      	movs	r1, #1
 8000e04:	fa01 f202 	lsl.w	r2, r1, r2
 8000e08:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2201      	movs	r2, #1
 8000e14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d004      	beq.n	8000e32 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	4798      	blx	r3
    }
  }
  return;
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
}
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40020400 	.word	0x40020400
 8000e40:	40020008 	.word	0x40020008
 8000e44:	4002001c 	.word	0x4002001c
 8000e48:	40020030 	.word	0x40020030
 8000e4c:	40020044 	.word	0x40020044
 8000e50:	40020058 	.word	0x40020058
 8000e54:	4002006c 	.word	0x4002006c
 8000e58:	40020080 	.word	0x40020080
 8000e5c:	40020408 	.word	0x40020408
 8000e60:	4002041c 	.word	0x4002041c
 8000e64:	40020430 	.word	0x40020430
 8000e68:	40020444 	.word	0x40020444
 8000e6c:	40020000 	.word	0x40020000

08000e70 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
 8000e7c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e86:	2101      	movs	r1, #1
 8000e88:	fa01 f202 	lsl.w	r2, r1, r2
 8000e8c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	683a      	ldr	r2, [r7, #0]
 8000e94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	2b10      	cmp	r3, #16
 8000e9c:	d108      	bne.n	8000eb0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000eae:	e007      	b.n	8000ec0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	68ba      	ldr	r2, [r7, #8]
 8000eb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	60da      	str	r2, [r3, #12]
}
 8000ec0:	bf00      	nop
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
	...

08000ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b08b      	sub	sp, #44	; 0x2c
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000eda:	2300      	movs	r3, #0
 8000edc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ede:	e127      	b.n	8001130 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	69fa      	ldr	r2, [r7, #28]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	f040 8116 	bne.w	800112a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b12      	cmp	r3, #18
 8000f04:	d034      	beq.n	8000f70 <HAL_GPIO_Init+0xa4>
 8000f06:	2b12      	cmp	r3, #18
 8000f08:	d80d      	bhi.n	8000f26 <HAL_GPIO_Init+0x5a>
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d02b      	beq.n	8000f66 <HAL_GPIO_Init+0x9a>
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d804      	bhi.n	8000f1c <HAL_GPIO_Init+0x50>
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d031      	beq.n	8000f7a <HAL_GPIO_Init+0xae>
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d01c      	beq.n	8000f54 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f1a:	e048      	b.n	8000fae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f1c:	2b03      	cmp	r3, #3
 8000f1e:	d043      	beq.n	8000fa8 <HAL_GPIO_Init+0xdc>
 8000f20:	2b11      	cmp	r3, #17
 8000f22:	d01b      	beq.n	8000f5c <HAL_GPIO_Init+0x90>
          break;
 8000f24:	e043      	b.n	8000fae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f26:	4a89      	ldr	r2, [pc, #548]	; (800114c <HAL_GPIO_Init+0x280>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d026      	beq.n	8000f7a <HAL_GPIO_Init+0xae>
 8000f2c:	4a87      	ldr	r2, [pc, #540]	; (800114c <HAL_GPIO_Init+0x280>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d806      	bhi.n	8000f40 <HAL_GPIO_Init+0x74>
 8000f32:	4a87      	ldr	r2, [pc, #540]	; (8001150 <HAL_GPIO_Init+0x284>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d020      	beq.n	8000f7a <HAL_GPIO_Init+0xae>
 8000f38:	4a86      	ldr	r2, [pc, #536]	; (8001154 <HAL_GPIO_Init+0x288>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d01d      	beq.n	8000f7a <HAL_GPIO_Init+0xae>
          break;
 8000f3e:	e036      	b.n	8000fae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f40:	4a85      	ldr	r2, [pc, #532]	; (8001158 <HAL_GPIO_Init+0x28c>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d019      	beq.n	8000f7a <HAL_GPIO_Init+0xae>
 8000f46:	4a85      	ldr	r2, [pc, #532]	; (800115c <HAL_GPIO_Init+0x290>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d016      	beq.n	8000f7a <HAL_GPIO_Init+0xae>
 8000f4c:	4a84      	ldr	r2, [pc, #528]	; (8001160 <HAL_GPIO_Init+0x294>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d013      	beq.n	8000f7a <HAL_GPIO_Init+0xae>
          break;
 8000f52:	e02c      	b.n	8000fae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	623b      	str	r3, [r7, #32]
          break;
 8000f5a:	e028      	b.n	8000fae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	3304      	adds	r3, #4
 8000f62:	623b      	str	r3, [r7, #32]
          break;
 8000f64:	e023      	b.n	8000fae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	3308      	adds	r3, #8
 8000f6c:	623b      	str	r3, [r7, #32]
          break;
 8000f6e:	e01e      	b.n	8000fae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	330c      	adds	r3, #12
 8000f76:	623b      	str	r3, [r7, #32]
          break;
 8000f78:	e019      	b.n	8000fae <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d102      	bne.n	8000f88 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f82:	2304      	movs	r3, #4
 8000f84:	623b      	str	r3, [r7, #32]
          break;
 8000f86:	e012      	b.n	8000fae <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d105      	bne.n	8000f9c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f90:	2308      	movs	r3, #8
 8000f92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	69fa      	ldr	r2, [r7, #28]
 8000f98:	611a      	str	r2, [r3, #16]
          break;
 8000f9a:	e008      	b.n	8000fae <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f9c:	2308      	movs	r3, #8
 8000f9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	69fa      	ldr	r2, [r7, #28]
 8000fa4:	615a      	str	r2, [r3, #20]
          break;
 8000fa6:	e002      	b.n	8000fae <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	623b      	str	r3, [r7, #32]
          break;
 8000fac:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	2bff      	cmp	r3, #255	; 0xff
 8000fb2:	d801      	bhi.n	8000fb8 <HAL_GPIO_Init+0xec>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	e001      	b.n	8000fbc <HAL_GPIO_Init+0xf0>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3304      	adds	r3, #4
 8000fbc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	2bff      	cmp	r3, #255	; 0xff
 8000fc2:	d802      	bhi.n	8000fca <HAL_GPIO_Init+0xfe>
 8000fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	e002      	b.n	8000fd0 <HAL_GPIO_Init+0x104>
 8000fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fcc:	3b08      	subs	r3, #8
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	210f      	movs	r1, #15
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	fa01 f303 	lsl.w	r3, r1, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	401a      	ands	r2, r3
 8000fe2:	6a39      	ldr	r1, [r7, #32]
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fea:	431a      	orrs	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	f000 8096 	beq.w	800112a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ffe:	4b59      	ldr	r3, [pc, #356]	; (8001164 <HAL_GPIO_Init+0x298>)
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	4a58      	ldr	r2, [pc, #352]	; (8001164 <HAL_GPIO_Init+0x298>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6193      	str	r3, [r2, #24]
 800100a:	4b56      	ldr	r3, [pc, #344]	; (8001164 <HAL_GPIO_Init+0x298>)
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001016:	4a54      	ldr	r2, [pc, #336]	; (8001168 <HAL_GPIO_Init+0x29c>)
 8001018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101a:	089b      	lsrs	r3, r3, #2
 800101c:	3302      	adds	r3, #2
 800101e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001022:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	220f      	movs	r2, #15
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	68fa      	ldr	r2, [r7, #12]
 8001036:	4013      	ands	r3, r2
 8001038:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a4b      	ldr	r2, [pc, #300]	; (800116c <HAL_GPIO_Init+0x2a0>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d013      	beq.n	800106a <HAL_GPIO_Init+0x19e>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a4a      	ldr	r2, [pc, #296]	; (8001170 <HAL_GPIO_Init+0x2a4>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d00d      	beq.n	8001066 <HAL_GPIO_Init+0x19a>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a49      	ldr	r2, [pc, #292]	; (8001174 <HAL_GPIO_Init+0x2a8>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d007      	beq.n	8001062 <HAL_GPIO_Init+0x196>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a48      	ldr	r2, [pc, #288]	; (8001178 <HAL_GPIO_Init+0x2ac>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d101      	bne.n	800105e <HAL_GPIO_Init+0x192>
 800105a:	2303      	movs	r3, #3
 800105c:	e006      	b.n	800106c <HAL_GPIO_Init+0x1a0>
 800105e:	2304      	movs	r3, #4
 8001060:	e004      	b.n	800106c <HAL_GPIO_Init+0x1a0>
 8001062:	2302      	movs	r3, #2
 8001064:	e002      	b.n	800106c <HAL_GPIO_Init+0x1a0>
 8001066:	2301      	movs	r3, #1
 8001068:	e000      	b.n	800106c <HAL_GPIO_Init+0x1a0>
 800106a:	2300      	movs	r3, #0
 800106c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800106e:	f002 0203 	and.w	r2, r2, #3
 8001072:	0092      	lsls	r2, r2, #2
 8001074:	4093      	lsls	r3, r2
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	4313      	orrs	r3, r2
 800107a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800107c:	493a      	ldr	r1, [pc, #232]	; (8001168 <HAL_GPIO_Init+0x29c>)
 800107e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001080:	089b      	lsrs	r3, r3, #2
 8001082:	3302      	adds	r3, #2
 8001084:	68fa      	ldr	r2, [r7, #12]
 8001086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d006      	beq.n	80010a4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001096:	4b39      	ldr	r3, [pc, #228]	; (800117c <HAL_GPIO_Init+0x2b0>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	4938      	ldr	r1, [pc, #224]	; (800117c <HAL_GPIO_Init+0x2b0>)
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	600b      	str	r3, [r1, #0]
 80010a2:	e006      	b.n	80010b2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010a4:	4b35      	ldr	r3, [pc, #212]	; (800117c <HAL_GPIO_Init+0x2b0>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	43db      	mvns	r3, r3
 80010ac:	4933      	ldr	r1, [pc, #204]	; (800117c <HAL_GPIO_Init+0x2b0>)
 80010ae:	4013      	ands	r3, r2
 80010b0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d006      	beq.n	80010cc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010be:	4b2f      	ldr	r3, [pc, #188]	; (800117c <HAL_GPIO_Init+0x2b0>)
 80010c0:	685a      	ldr	r2, [r3, #4]
 80010c2:	492e      	ldr	r1, [pc, #184]	; (800117c <HAL_GPIO_Init+0x2b0>)
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	604b      	str	r3, [r1, #4]
 80010ca:	e006      	b.n	80010da <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010cc:	4b2b      	ldr	r3, [pc, #172]	; (800117c <HAL_GPIO_Init+0x2b0>)
 80010ce:	685a      	ldr	r2, [r3, #4]
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	43db      	mvns	r3, r3
 80010d4:	4929      	ldr	r1, [pc, #164]	; (800117c <HAL_GPIO_Init+0x2b0>)
 80010d6:	4013      	ands	r3, r2
 80010d8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d006      	beq.n	80010f4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010e6:	4b25      	ldr	r3, [pc, #148]	; (800117c <HAL_GPIO_Init+0x2b0>)
 80010e8:	689a      	ldr	r2, [r3, #8]
 80010ea:	4924      	ldr	r1, [pc, #144]	; (800117c <HAL_GPIO_Init+0x2b0>)
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	608b      	str	r3, [r1, #8]
 80010f2:	e006      	b.n	8001102 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010f4:	4b21      	ldr	r3, [pc, #132]	; (800117c <HAL_GPIO_Init+0x2b0>)
 80010f6:	689a      	ldr	r2, [r3, #8]
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	491f      	ldr	r1, [pc, #124]	; (800117c <HAL_GPIO_Init+0x2b0>)
 80010fe:	4013      	ands	r3, r2
 8001100:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d006      	beq.n	800111c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800110e:	4b1b      	ldr	r3, [pc, #108]	; (800117c <HAL_GPIO_Init+0x2b0>)
 8001110:	68da      	ldr	r2, [r3, #12]
 8001112:	491a      	ldr	r1, [pc, #104]	; (800117c <HAL_GPIO_Init+0x2b0>)
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	60cb      	str	r3, [r1, #12]
 800111a:	e006      	b.n	800112a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800111c:	4b17      	ldr	r3, [pc, #92]	; (800117c <HAL_GPIO_Init+0x2b0>)
 800111e:	68da      	ldr	r2, [r3, #12]
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	43db      	mvns	r3, r3
 8001124:	4915      	ldr	r1, [pc, #84]	; (800117c <HAL_GPIO_Init+0x2b0>)
 8001126:	4013      	ands	r3, r2
 8001128:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800112a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112c:	3301      	adds	r3, #1
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001136:	fa22 f303 	lsr.w	r3, r2, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	f47f aed0 	bne.w	8000ee0 <HAL_GPIO_Init+0x14>
  }
}
 8001140:	bf00      	nop
 8001142:	372c      	adds	r7, #44	; 0x2c
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	10210000 	.word	0x10210000
 8001150:	10110000 	.word	0x10110000
 8001154:	10120000 	.word	0x10120000
 8001158:	10310000 	.word	0x10310000
 800115c:	10320000 	.word	0x10320000
 8001160:	10220000 	.word	0x10220000
 8001164:	40021000 	.word	0x40021000
 8001168:	40010000 	.word	0x40010000
 800116c:	40010800 	.word	0x40010800
 8001170:	40010c00 	.word	0x40010c00
 8001174:	40011000 	.word	0x40011000
 8001178:	40011400 	.word	0x40011400
 800117c:	40010400 	.word	0x40010400

08001180 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e304      	b.n	800179c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	2b00      	cmp	r3, #0
 800119c:	f000 8087 	beq.w	80012ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011a0:	4b92      	ldr	r3, [pc, #584]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 030c 	and.w	r3, r3, #12
 80011a8:	2b04      	cmp	r3, #4
 80011aa:	d00c      	beq.n	80011c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011ac:	4b8f      	ldr	r3, [pc, #572]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 030c 	and.w	r3, r3, #12
 80011b4:	2b08      	cmp	r3, #8
 80011b6:	d112      	bne.n	80011de <HAL_RCC_OscConfig+0x5e>
 80011b8:	4b8c      	ldr	r3, [pc, #560]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c4:	d10b      	bne.n	80011de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c6:	4b89      	ldr	r3, [pc, #548]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d06c      	beq.n	80012ac <HAL_RCC_OscConfig+0x12c>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d168      	bne.n	80012ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e2de      	b.n	800179c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011e6:	d106      	bne.n	80011f6 <HAL_RCC_OscConfig+0x76>
 80011e8:	4b80      	ldr	r3, [pc, #512]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a7f      	ldr	r2, [pc, #508]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80011ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f2:	6013      	str	r3, [r2, #0]
 80011f4:	e02e      	b.n	8001254 <HAL_RCC_OscConfig+0xd4>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d10c      	bne.n	8001218 <HAL_RCC_OscConfig+0x98>
 80011fe:	4b7b      	ldr	r3, [pc, #492]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a7a      	ldr	r2, [pc, #488]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	4b78      	ldr	r3, [pc, #480]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a77      	ldr	r2, [pc, #476]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001210:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	e01d      	b.n	8001254 <HAL_RCC_OscConfig+0xd4>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001220:	d10c      	bne.n	800123c <HAL_RCC_OscConfig+0xbc>
 8001222:	4b72      	ldr	r3, [pc, #456]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a71      	ldr	r2, [pc, #452]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001228:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	4b6f      	ldr	r3, [pc, #444]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a6e      	ldr	r2, [pc, #440]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	e00b      	b.n	8001254 <HAL_RCC_OscConfig+0xd4>
 800123c:	4b6b      	ldr	r3, [pc, #428]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a6a      	ldr	r2, [pc, #424]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	4b68      	ldr	r3, [pc, #416]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a67      	ldr	r2, [pc, #412]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 800124e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001252:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d013      	beq.n	8001284 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800125c:	f7ff f9bc 	bl	80005d8 <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001264:	f7ff f9b8 	bl	80005d8 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b64      	cmp	r3, #100	; 0x64
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e292      	b.n	800179c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001276:	4b5d      	ldr	r3, [pc, #372]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d0f0      	beq.n	8001264 <HAL_RCC_OscConfig+0xe4>
 8001282:	e014      	b.n	80012ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001284:	f7ff f9a8 	bl	80005d8 <HAL_GetTick>
 8001288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800128c:	f7ff f9a4 	bl	80005d8 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b64      	cmp	r3, #100	; 0x64
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e27e      	b.n	800179c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800129e:	4b53      	ldr	r3, [pc, #332]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1f0      	bne.n	800128c <HAL_RCC_OscConfig+0x10c>
 80012aa:	e000      	b.n	80012ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d063      	beq.n	8001382 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012ba:	4b4c      	ldr	r3, [pc, #304]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 030c 	and.w	r3, r3, #12
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d00b      	beq.n	80012de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012c6:	4b49      	ldr	r3, [pc, #292]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 030c 	and.w	r3, r3, #12
 80012ce:	2b08      	cmp	r3, #8
 80012d0:	d11c      	bne.n	800130c <HAL_RCC_OscConfig+0x18c>
 80012d2:	4b46      	ldr	r3, [pc, #280]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d116      	bne.n	800130c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012de:	4b43      	ldr	r3, [pc, #268]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d005      	beq.n	80012f6 <HAL_RCC_OscConfig+0x176>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d001      	beq.n	80012f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e252      	b.n	800179c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f6:	4b3d      	ldr	r3, [pc, #244]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	699b      	ldr	r3, [r3, #24]
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	4939      	ldr	r1, [pc, #228]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001306:	4313      	orrs	r3, r2
 8001308:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800130a:	e03a      	b.n	8001382 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	695b      	ldr	r3, [r3, #20]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d020      	beq.n	8001356 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001314:	4b36      	ldr	r3, [pc, #216]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001316:	2201      	movs	r2, #1
 8001318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131a:	f7ff f95d 	bl	80005d8 <HAL_GetTick>
 800131e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001320:	e008      	b.n	8001334 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001322:	f7ff f959 	bl	80005d8 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e233      	b.n	800179c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001334:	4b2d      	ldr	r3, [pc, #180]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d0f0      	beq.n	8001322 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001340:	4b2a      	ldr	r3, [pc, #168]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	4927      	ldr	r1, [pc, #156]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001350:	4313      	orrs	r3, r2
 8001352:	600b      	str	r3, [r1, #0]
 8001354:	e015      	b.n	8001382 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001356:	4b26      	ldr	r3, [pc, #152]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135c:	f7ff f93c 	bl	80005d8 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001364:	f7ff f938 	bl	80005d8 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e212      	b.n	800179c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001376:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1f0      	bne.n	8001364 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0308 	and.w	r3, r3, #8
 800138a:	2b00      	cmp	r3, #0
 800138c:	d03a      	beq.n	8001404 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d019      	beq.n	80013ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001396:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <HAL_RCC_OscConfig+0x274>)
 8001398:	2201      	movs	r2, #1
 800139a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139c:	f7ff f91c 	bl	80005d8 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013a4:	f7ff f918 	bl	80005d8 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e1f2      	b.n	800179c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b6:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80013b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0f0      	beq.n	80013a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013c2:	2001      	movs	r0, #1
 80013c4:	f000 fb98 	bl	8001af8 <RCC_Delay>
 80013c8:	e01c      	b.n	8001404 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ca:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <HAL_RCC_OscConfig+0x274>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d0:	f7ff f902 	bl	80005d8 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d6:	e00f      	b.n	80013f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013d8:	f7ff f8fe 	bl	80005d8 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d908      	bls.n	80013f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e1d8      	b.n	800179c <HAL_RCC_OscConfig+0x61c>
 80013ea:	bf00      	nop
 80013ec:	40021000 	.word	0x40021000
 80013f0:	42420000 	.word	0x42420000
 80013f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f8:	4b9b      	ldr	r3, [pc, #620]	; (8001668 <HAL_RCC_OscConfig+0x4e8>)
 80013fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1e9      	bne.n	80013d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0304 	and.w	r3, r3, #4
 800140c:	2b00      	cmp	r3, #0
 800140e:	f000 80a6 	beq.w	800155e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001412:	2300      	movs	r3, #0
 8001414:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001416:	4b94      	ldr	r3, [pc, #592]	; (8001668 <HAL_RCC_OscConfig+0x4e8>)
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d10d      	bne.n	800143e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	4b91      	ldr	r3, [pc, #580]	; (8001668 <HAL_RCC_OscConfig+0x4e8>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	4a90      	ldr	r2, [pc, #576]	; (8001668 <HAL_RCC_OscConfig+0x4e8>)
 8001428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800142c:	61d3      	str	r3, [r2, #28]
 800142e:	4b8e      	ldr	r3, [pc, #568]	; (8001668 <HAL_RCC_OscConfig+0x4e8>)
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800143a:	2301      	movs	r3, #1
 800143c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800143e:	4b8b      	ldr	r3, [pc, #556]	; (800166c <HAL_RCC_OscConfig+0x4ec>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001446:	2b00      	cmp	r3, #0
 8001448:	d118      	bne.n	800147c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800144a:	4b88      	ldr	r3, [pc, #544]	; (800166c <HAL_RCC_OscConfig+0x4ec>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a87      	ldr	r2, [pc, #540]	; (800166c <HAL_RCC_OscConfig+0x4ec>)
 8001450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001454:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001456:	f7ff f8bf 	bl	80005d8 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800145e:	f7ff f8bb 	bl	80005d8 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b64      	cmp	r3, #100	; 0x64
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e195      	b.n	800179c <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001470:	4b7e      	ldr	r3, [pc, #504]	; (800166c <HAL_RCC_OscConfig+0x4ec>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0f0      	beq.n	800145e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d106      	bne.n	8001492 <HAL_RCC_OscConfig+0x312>
 8001484:	4b78      	ldr	r3, [pc, #480]	; (8001668 <HAL_RCC_OscConfig+0x4e8>)
 8001486:	6a1b      	ldr	r3, [r3, #32]
 8001488:	4a77      	ldr	r2, [pc, #476]	; (8001668 <HAL_RCC_OscConfig+0x4e8>)
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	6213      	str	r3, [r2, #32]
 8001490:	e02d      	b.n	80014ee <HAL_RCC_OscConfig+0x36e>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d10c      	bne.n	80014b4 <HAL_RCC_OscConfig+0x334>
 800149a:	4b73      	ldr	r3, [pc, #460]	; (8001668 <HAL_RCC_OscConfig+0x4e8>)
 800149c:	6a1b      	ldr	r3, [r3, #32]
 800149e:	4a72      	ldr	r2, [pc, #456]	; (8001668 <HAL_RCC_OscConfig+0x4e8>)
 80014a0:	f023 0301 	bic.w	r3, r3, #1
 80014a4:	6213      	str	r3, [r2, #32]
 80014a6:	4b70      	ldr	r3, [pc, #448]	; (8001668 <HAL_RCC_OscConfig+0x4e8>)
 80014a8:	6a1b      	ldr	r3, [r3, #32]
 80014aa:	4a6f      	ldr	r2, [pc, #444]	; (8001668 <HAL_RCC_OscConfig+0x4e8>)
 80014ac:	f023 0304 	bic.w	r3, r3, #4
 80014b0:	6213      	str	r3, [r2, #32]
 80014b2:	e01c      	b.n	80014ee <HAL_RCC_OscConfig+0x36e>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	2b05      	cmp	r3, #5
 80014ba:	d10c      	bne.n	80014d6 <HAL_RCC_OscConfig+0x356>
 80014bc:	4b6a      	ldr	r3, [pc, #424]	; (8001668 <HAL_RCC_OscConfig+0x4e8>)
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	4a69      	ldr	r2, [pc, #420]	; (8001668 <HAL_RCC_OscConfig+0x4e8>)
 80014c2:	f043 0304 	orr.w	r3, r3, #4
 80014c6:	6213      	str	r3, [r2, #32]
 80014c8:	4b67      	ldr	r3, [pc, #412]	; (8001668 <HAL_RCC_OscConfig+0x4e8>)
 80014ca:	6a1b      	ldr	r3, [r3, #32]
 80014cc:	4a66      	ldr	r2, [pc, #408]	; (8001668 <HAL_RCC_OscConfig+0x4e8>)
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	6213      	str	r3, [r2, #32]
 80014d4:	e00b      	b.n	80014ee <HAL_RCC_OscConfig+0x36e>
 80014d6:	4b64      	ldr	r3, [pc, #400]	; (8001668 <HAL_RCC_OscConfig+0x4e8>)
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	4a63      	ldr	r2, [pc, #396]	; (8001668 <HAL_RCC_OscConfig+0x4e8>)
 80014dc:	f023 0301 	bic.w	r3, r3, #1
 80014e0:	6213      	str	r3, [r2, #32]
 80014e2:	4b61      	ldr	r3, [pc, #388]	; (8001668 <HAL_RCC_OscConfig+0x4e8>)
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	4a60      	ldr	r2, [pc, #384]	; (8001668 <HAL_RCC_OscConfig+0x4e8>)
 80014e8:	f023 0304 	bic.w	r3, r3, #4
 80014ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d015      	beq.n	8001522 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f6:	f7ff f86f 	bl	80005d8 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014fc:	e00a      	b.n	8001514 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014fe:	f7ff f86b 	bl	80005d8 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	f241 3288 	movw	r2, #5000	; 0x1388
 800150c:	4293      	cmp	r3, r2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e143      	b.n	800179c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001514:	4b54      	ldr	r3, [pc, #336]	; (8001668 <HAL_RCC_OscConfig+0x4e8>)
 8001516:	6a1b      	ldr	r3, [r3, #32]
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0ee      	beq.n	80014fe <HAL_RCC_OscConfig+0x37e>
 8001520:	e014      	b.n	800154c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001522:	f7ff f859 	bl	80005d8 <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001528:	e00a      	b.n	8001540 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800152a:	f7ff f855 	bl	80005d8 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	f241 3288 	movw	r2, #5000	; 0x1388
 8001538:	4293      	cmp	r3, r2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e12d      	b.n	800179c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001540:	4b49      	ldr	r3, [pc, #292]	; (8001668 <HAL_RCC_OscConfig+0x4e8>)
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1ee      	bne.n	800152a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800154c:	7dfb      	ldrb	r3, [r7, #23]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d105      	bne.n	800155e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001552:	4b45      	ldr	r3, [pc, #276]	; (8001668 <HAL_RCC_OscConfig+0x4e8>)
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	4a44      	ldr	r2, [pc, #272]	; (8001668 <HAL_RCC_OscConfig+0x4e8>)
 8001558:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800155c:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001562:	2b00      	cmp	r3, #0
 8001564:	f000 808c 	beq.w	8001680 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001568:	4b3f      	ldr	r3, [pc, #252]	; (8001668 <HAL_RCC_OscConfig+0x4e8>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001574:	d10e      	bne.n	8001594 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001576:	4b3c      	ldr	r3, [pc, #240]	; (8001668 <HAL_RCC_OscConfig+0x4e8>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800157e:	2b08      	cmp	r3, #8
 8001580:	d108      	bne.n	8001594 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8001582:	4b39      	ldr	r3, [pc, #228]	; (8001668 <HAL_RCC_OscConfig+0x4e8>)
 8001584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800158a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800158e:	d101      	bne.n	8001594 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e103      	b.n	800179c <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001598:	2b02      	cmp	r3, #2
 800159a:	d14e      	bne.n	800163a <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800159c:	4b32      	ldr	r3, [pc, #200]	; (8001668 <HAL_RCC_OscConfig+0x4e8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d009      	beq.n	80015bc <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80015a8:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <HAL_RCC_OscConfig+0x4e8>)
 80015aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d001      	beq.n	80015bc <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e0ef      	b.n	800179c <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80015bc:	4b2c      	ldr	r3, [pc, #176]	; (8001670 <HAL_RCC_OscConfig+0x4f0>)
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c2:	f7ff f809 	bl	80005d8 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80015ca:	f7ff f805 	bl	80005d8 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b64      	cmp	r3, #100	; 0x64
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e0df      	b.n	800179c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80015dc:	4b22      	ldr	r3, [pc, #136]	; (8001668 <HAL_RCC_OscConfig+0x4e8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1f0      	bne.n	80015ca <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80015e8:	4b1f      	ldr	r3, [pc, #124]	; (8001668 <HAL_RCC_OscConfig+0x4e8>)
 80015ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f4:	491c      	ldr	r1, [pc, #112]	; (8001668 <HAL_RCC_OscConfig+0x4e8>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80015fa:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <HAL_RCC_OscConfig+0x4e8>)
 80015fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4918      	ldr	r1, [pc, #96]	; (8001668 <HAL_RCC_OscConfig+0x4e8>)
 8001608:	4313      	orrs	r3, r2
 800160a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 800160c:	4b18      	ldr	r3, [pc, #96]	; (8001670 <HAL_RCC_OscConfig+0x4f0>)
 800160e:	2201      	movs	r2, #1
 8001610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001612:	f7fe ffe1 	bl	80005d8 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800161a:	f7fe ffdd 	bl	80005d8 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b64      	cmp	r3, #100	; 0x64
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e0b7      	b.n	800179c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 800162c:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <HAL_RCC_OscConfig+0x4e8>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0f0      	beq.n	800161a <HAL_RCC_OscConfig+0x49a>
 8001638:	e022      	b.n	8001680 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <HAL_RCC_OscConfig+0x4e8>)
 800163c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163e:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <HAL_RCC_OscConfig+0x4e8>)
 8001640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001644:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001646:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <HAL_RCC_OscConfig+0x4f0>)
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164c:	f7fe ffc4 	bl	80005d8 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001652:	e00f      	b.n	8001674 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001654:	f7fe ffc0 	bl	80005d8 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b64      	cmp	r3, #100	; 0x64
 8001660:	d908      	bls.n	8001674 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e09a      	b.n	800179c <HAL_RCC_OscConfig+0x61c>
 8001666:	bf00      	nop
 8001668:	40021000 	.word	0x40021000
 800166c:	40007000 	.word	0x40007000
 8001670:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001674:	4b4b      	ldr	r3, [pc, #300]	; (80017a4 <HAL_RCC_OscConfig+0x624>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1e9      	bne.n	8001654 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	2b00      	cmp	r3, #0
 8001686:	f000 8088 	beq.w	800179a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800168a:	4b46      	ldr	r3, [pc, #280]	; (80017a4 <HAL_RCC_OscConfig+0x624>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f003 030c 	and.w	r3, r3, #12
 8001692:	2b08      	cmp	r3, #8
 8001694:	d068      	beq.n	8001768 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	2b02      	cmp	r3, #2
 800169c:	d14d      	bne.n	800173a <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169e:	4b42      	ldr	r3, [pc, #264]	; (80017a8 <HAL_RCC_OscConfig+0x628>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a4:	f7fe ff98 	bl	80005d8 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ac:	f7fe ff94 	bl	80005d8 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e06e      	b.n	800179c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016be:	4b39      	ldr	r3, [pc, #228]	; (80017a4 <HAL_RCC_OscConfig+0x624>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f0      	bne.n	80016ac <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d2:	d10f      	bne.n	80016f4 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80016d4:	4b33      	ldr	r3, [pc, #204]	; (80017a4 <HAL_RCC_OscConfig+0x624>)
 80016d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	4931      	ldr	r1, [pc, #196]	; (80017a4 <HAL_RCC_OscConfig+0x624>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016e2:	4b30      	ldr	r3, [pc, #192]	; (80017a4 <HAL_RCC_OscConfig+0x624>)
 80016e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e6:	f023 020f 	bic.w	r2, r3, #15
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	492d      	ldr	r1, [pc, #180]	; (80017a4 <HAL_RCC_OscConfig+0x624>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016f4:	4b2b      	ldr	r3, [pc, #172]	; (80017a4 <HAL_RCC_OscConfig+0x624>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001704:	430b      	orrs	r3, r1
 8001706:	4927      	ldr	r1, [pc, #156]	; (80017a4 <HAL_RCC_OscConfig+0x624>)
 8001708:	4313      	orrs	r3, r2
 800170a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800170c:	4b26      	ldr	r3, [pc, #152]	; (80017a8 <HAL_RCC_OscConfig+0x628>)
 800170e:	2201      	movs	r2, #1
 8001710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001712:	f7fe ff61 	bl	80005d8 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800171a:	f7fe ff5d 	bl	80005d8 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e037      	b.n	800179c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800172c:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <HAL_RCC_OscConfig+0x624>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0f0      	beq.n	800171a <HAL_RCC_OscConfig+0x59a>
 8001738:	e02f      	b.n	800179a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800173a:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <HAL_RCC_OscConfig+0x628>)
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001740:	f7fe ff4a 	bl	80005d8 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001748:	f7fe ff46 	bl	80005d8 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e020      	b.n	800179c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800175a:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <HAL_RCC_OscConfig+0x624>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f0      	bne.n	8001748 <HAL_RCC_OscConfig+0x5c8>
 8001766:	e018      	b.n	800179a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d101      	bne.n	8001774 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e013      	b.n	800179c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001774:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <HAL_RCC_OscConfig+0x624>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	429a      	cmp	r2, r3
 8001786:	d106      	bne.n	8001796 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001792:	429a      	cmp	r2, r3
 8001794:	d001      	beq.n	800179a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e000      	b.n	800179c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40021000 	.word	0x40021000
 80017a8:	42420060 	.word	0x42420060

080017ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e0d0      	b.n	8001962 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017c0:	4b6a      	ldr	r3, [pc, #424]	; (800196c <HAL_RCC_ClockConfig+0x1c0>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0307 	and.w	r3, r3, #7
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d910      	bls.n	80017f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ce:	4b67      	ldr	r3, [pc, #412]	; (800196c <HAL_RCC_ClockConfig+0x1c0>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f023 0207 	bic.w	r2, r3, #7
 80017d6:	4965      	ldr	r1, [pc, #404]	; (800196c <HAL_RCC_ClockConfig+0x1c0>)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	4313      	orrs	r3, r2
 80017dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017de:	4b63      	ldr	r3, [pc, #396]	; (800196c <HAL_RCC_ClockConfig+0x1c0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d001      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e0b8      	b.n	8001962 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d020      	beq.n	800183e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0304 	and.w	r3, r3, #4
 8001804:	2b00      	cmp	r3, #0
 8001806:	d005      	beq.n	8001814 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001808:	4b59      	ldr	r3, [pc, #356]	; (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	4a58      	ldr	r2, [pc, #352]	; (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 800180e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001812:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0308 	and.w	r3, r3, #8
 800181c:	2b00      	cmp	r3, #0
 800181e:	d005      	beq.n	800182c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001820:	4b53      	ldr	r3, [pc, #332]	; (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	4a52      	ldr	r2, [pc, #328]	; (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 8001826:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800182a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800182c:	4b50      	ldr	r3, [pc, #320]	; (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	494d      	ldr	r1, [pc, #308]	; (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 800183a:	4313      	orrs	r3, r2
 800183c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d040      	beq.n	80018cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d107      	bne.n	8001862 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001852:	4b47      	ldr	r3, [pc, #284]	; (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d115      	bne.n	800188a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e07f      	b.n	8001962 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d107      	bne.n	800187a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800186a:	4b41      	ldr	r3, [pc, #260]	; (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d109      	bne.n	800188a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e073      	b.n	8001962 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187a:	4b3d      	ldr	r3, [pc, #244]	; (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e06b      	b.n	8001962 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800188a:	4b39      	ldr	r3, [pc, #228]	; (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f023 0203 	bic.w	r2, r3, #3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	4936      	ldr	r1, [pc, #216]	; (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 8001898:	4313      	orrs	r3, r2
 800189a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800189c:	f7fe fe9c 	bl	80005d8 <HAL_GetTick>
 80018a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a2:	e00a      	b.n	80018ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a4:	f7fe fe98 	bl	80005d8 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e053      	b.n	8001962 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ba:	4b2d      	ldr	r3, [pc, #180]	; (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 020c 	and.w	r2, r3, #12
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d1eb      	bne.n	80018a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018cc:	4b27      	ldr	r3, [pc, #156]	; (800196c <HAL_RCC_ClockConfig+0x1c0>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d210      	bcs.n	80018fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018da:	4b24      	ldr	r3, [pc, #144]	; (800196c <HAL_RCC_ClockConfig+0x1c0>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f023 0207 	bic.w	r2, r3, #7
 80018e2:	4922      	ldr	r1, [pc, #136]	; (800196c <HAL_RCC_ClockConfig+0x1c0>)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ea:	4b20      	ldr	r3, [pc, #128]	; (800196c <HAL_RCC_ClockConfig+0x1c0>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d001      	beq.n	80018fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e032      	b.n	8001962 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	2b00      	cmp	r3, #0
 8001906:	d008      	beq.n	800191a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001908:	4b19      	ldr	r3, [pc, #100]	; (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	4916      	ldr	r1, [pc, #88]	; (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 8001916:	4313      	orrs	r3, r2
 8001918:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	2b00      	cmp	r3, #0
 8001924:	d009      	beq.n	800193a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001926:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	490e      	ldr	r1, [pc, #56]	; (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 8001936:	4313      	orrs	r3, r2
 8001938:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800193a:	f000 f821 	bl	8001980 <HAL_RCC_GetSysClockFreq>
 800193e:	4601      	mov	r1, r0
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	091b      	lsrs	r3, r3, #4
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <HAL_RCC_ClockConfig+0x1c8>)
 800194c:	5cd3      	ldrb	r3, [r2, r3]
 800194e:	fa21 f303 	lsr.w	r3, r1, r3
 8001952:	4a09      	ldr	r2, [pc, #36]	; (8001978 <HAL_RCC_ClockConfig+0x1cc>)
 8001954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001956:	4b09      	ldr	r3, [pc, #36]	; (800197c <HAL_RCC_ClockConfig+0x1d0>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f7fe fdfa 	bl	8000554 <HAL_InitTick>

  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40022000 	.word	0x40022000
 8001970:	40021000 	.word	0x40021000
 8001974:	08002f28 	.word	0x08002f28
 8001978:	20000008 	.word	0x20000008
 800197c:	20000000 	.word	0x20000000

08001980 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001982:	b091      	sub	sp, #68	; 0x44
 8001984:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8001986:	4b56      	ldr	r3, [pc, #344]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001988:	f107 0414 	add.w	r4, r7, #20
 800198c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800198e:	c407      	stmia	r4!, {r0, r1, r2}
 8001990:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8001992:	4b54      	ldr	r3, [pc, #336]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x164>)
 8001994:	1d3c      	adds	r4, r7, #4
 8001996:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001998:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800199c:	2300      	movs	r3, #0
 800199e:	637b      	str	r3, [r7, #52]	; 0x34
 80019a0:	2300      	movs	r3, #0
 80019a2:	633b      	str	r3, [r7, #48]	; 0x30
 80019a4:	2300      	movs	r3, #0
 80019a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019a8:	2300      	movs	r3, #0
 80019aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80019b4:	2300      	movs	r3, #0
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019b8:	4b4b      	ldr	r3, [pc, #300]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x168>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019c0:	f003 030c 	and.w	r3, r3, #12
 80019c4:	2b04      	cmp	r3, #4
 80019c6:	d002      	beq.n	80019ce <HAL_RCC_GetSysClockFreq+0x4e>
 80019c8:	2b08      	cmp	r3, #8
 80019ca:	d003      	beq.n	80019d4 <HAL_RCC_GetSysClockFreq+0x54>
 80019cc:	e07f      	b.n	8001ace <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019ce:	4b47      	ldr	r3, [pc, #284]	; (8001aec <HAL_RCC_GetSysClockFreq+0x16c>)
 80019d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019d2:	e07f      	b.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019d6:	0c9b      	lsrs	r3, r3, #18
 80019d8:	f003 030f 	and.w	r3, r3, #15
 80019dc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80019e0:	4413      	add	r3, r2
 80019e2:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80019e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d065      	beq.n	8001abe <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80019f2:	4b3d      	ldr	r3, [pc, #244]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x168>)
 80019f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80019fe:	4413      	add	r3, r2
 8001a00:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8001a04:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8001a06:	4b38      	ldr	r3, [pc, #224]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x168>)
 8001a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d043      	beq.n	8001a9a <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8001a12:	4b35      	ldr	r3, [pc, #212]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x168>)
 8001a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a16:	091b      	lsrs	r3, r3, #4
 8001a18:	f003 030f 	and.w	r3, r3, #15
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8001a20:	4b31      	ldr	r3, [pc, #196]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x168>)
 8001a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a24:	0a1b      	lsrs	r3, r3, #8
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	3302      	adds	r3, #2
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	4619      	mov	r1, r3
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a38:	f04f 0400 	mov.w	r4, #0
 8001a3c:	fb03 f502 	mul.w	r5, r3, r2
 8001a40:	fb01 f004 	mul.w	r0, r1, r4
 8001a44:	4428      	add	r0, r5
 8001a46:	fba1 3403 	umull	r3, r4, r1, r3
 8001a4a:	1902      	adds	r2, r0, r4
 8001a4c:	4614      	mov	r4, r2
 8001a4e:	4a27      	ldr	r2, [pc, #156]	; (8001aec <HAL_RCC_GetSysClockFreq+0x16c>)
 8001a50:	fb02 f104 	mul.w	r1, r2, r4
 8001a54:	2200      	movs	r2, #0
 8001a56:	fb02 f203 	mul.w	r2, r2, r3
 8001a5a:	440a      	add	r2, r1
 8001a5c:	4923      	ldr	r1, [pc, #140]	; (8001aec <HAL_RCC_GetSysClockFreq+0x16c>)
 8001a5e:	fba3 5601 	umull	r5, r6, r3, r1
 8001a62:	1993      	adds	r3, r2, r6
 8001a64:	461e      	mov	r6, r3
 8001a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f04f 0200 	mov.w	r2, #0
 8001a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a70:	f04f 0400 	mov.w	r4, #0
 8001a74:	fb03 fc02 	mul.w	ip, r3, r2
 8001a78:	fb01 f004 	mul.w	r0, r1, r4
 8001a7c:	4460      	add	r0, ip
 8001a7e:	fba1 3403 	umull	r3, r4, r1, r3
 8001a82:	1902      	adds	r2, r0, r4
 8001a84:	4614      	mov	r4, r2
 8001a86:	461a      	mov	r2, r3
 8001a88:	4623      	mov	r3, r4
 8001a8a:	4628      	mov	r0, r5
 8001a8c:	4631      	mov	r1, r6
 8001a8e:	f7fe fbc9 	bl	8000224 <__aeabi_uldivmod>
 8001a92:	4603      	mov	r3, r0
 8001a94:	460c      	mov	r4, r1
 8001a96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a98:	e007      	b.n	8001aaa <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8001a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a9c:	4a13      	ldr	r2, [pc, #76]	; (8001aec <HAL_RCC_GetSysClockFreq+0x16c>)
 8001a9e:	fb02 f203 	mul.w	r2, r2, r3
 8001aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8001aaa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001aae:	461a      	mov	r2, r3
 8001ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d108      	bne.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 8001ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ab8:	085b      	lsrs	r3, r3, #1
 8001aba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001abc:	e004      	b.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac0:	4a0b      	ldr	r2, [pc, #44]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x170>)
 8001ac2:	fb02 f303 	mul.w	r3, r2, r3
 8001ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8001ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001acc:	e002      	b.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ace:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x174>)
 8001ad0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ad2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3744      	adds	r7, #68	; 0x44
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	08002f04 	.word	0x08002f04
 8001ae4:	08002f14 	.word	0x08002f14
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	017d7840 	.word	0x017d7840
 8001af0:	003d0900 	.word	0x003d0900
 8001af4:	007a1200 	.word	0x007a1200

08001af8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b00:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <RCC_Delay+0x34>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a0a      	ldr	r2, [pc, #40]	; (8001b30 <RCC_Delay+0x38>)
 8001b06:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0a:	0a5b      	lsrs	r3, r3, #9
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	fb02 f303 	mul.w	r3, r2, r3
 8001b12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b14:	bf00      	nop
  }
  while (Delay --);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	1e5a      	subs	r2, r3, #1
 8001b1a:	60fa      	str	r2, [r7, #12]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1f9      	bne.n	8001b14 <RCC_Delay+0x1c>
}
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000008 	.word	0x20000008
 8001b30:	10624dd3 	.word	0x10624dd3

08001b34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e01d      	b.n	8001b82 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d106      	bne.n	8001b60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f001 f872 	bl	8002c44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2202      	movs	r2, #2
 8001b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3304      	adds	r3, #4
 8001b70:	4619      	mov	r1, r3
 8001b72:	4610      	mov	r0, r2
 8001b74:	f000 fa74 	bl	8002060 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
 8001b98:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d101      	bne.n	8001baa <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	e0e9      	b.n	8001d7e <HAL_TIM_PWM_Start_DMA+0x1f2>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d10b      	bne.n	8001bce <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d104      	bne.n	8001bc6 <HAL_TIM_PWM_Start_DMA+0x3a>
 8001bbc:	887b      	ldrh	r3, [r7, #2]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e0db      	b.n	8001d7e <HAL_TIM_PWM_Start_DMA+0x1f2>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2202      	movs	r2, #2
 8001bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	2b0c      	cmp	r3, #12
 8001bd2:	f200 80ad 	bhi.w	8001d30 <HAL_TIM_PWM_Start_DMA+0x1a4>
 8001bd6:	a201      	add	r2, pc, #4	; (adr r2, 8001bdc <HAL_TIM_PWM_Start_DMA+0x50>)
 8001bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bdc:	08001c11 	.word	0x08001c11
 8001be0:	08001d31 	.word	0x08001d31
 8001be4:	08001d31 	.word	0x08001d31
 8001be8:	08001d31 	.word	0x08001d31
 8001bec:	08001c59 	.word	0x08001c59
 8001bf0:	08001d31 	.word	0x08001d31
 8001bf4:	08001d31 	.word	0x08001d31
 8001bf8:	08001d31 	.word	0x08001d31
 8001bfc:	08001ca1 	.word	0x08001ca1
 8001c00:	08001d31 	.word	0x08001d31
 8001c04:	08001d31 	.word	0x08001d31
 8001c08:	08001d31 	.word	0x08001d31
 8001c0c:	08001ce9 	.word	0x08001ce9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c14:	4a5c      	ldr	r2, [pc, #368]	; (8001d88 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8001c16:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1c:	4a5b      	ldr	r2, [pc, #364]	; (8001d8c <HAL_TIM_PWM_Start_DMA+0x200>)
 8001c1e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	4a5a      	ldr	r2, [pc, #360]	; (8001d90 <HAL_TIM_PWM_Start_DMA+0x204>)
 8001c26:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001c2c:	6879      	ldr	r1, [r7, #4]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	3334      	adds	r3, #52	; 0x34
 8001c34:	461a      	mov	r2, r3
 8001c36:	887b      	ldrh	r3, [r7, #2]
 8001c38:	f7fe fe7e 	bl	8000938 <HAL_DMA_Start_IT>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e09b      	b.n	8001d7e <HAL_TIM_PWM_Start_DMA+0x1f2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68da      	ldr	r2, [r3, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c54:	60da      	str	r2, [r3, #12]
      break;
 8001c56:	e06c      	b.n	8001d32 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5c:	4a4a      	ldr	r2, [pc, #296]	; (8001d88 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8001c5e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c64:	4a49      	ldr	r2, [pc, #292]	; (8001d8c <HAL_TIM_PWM_Start_DMA+0x200>)
 8001c66:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6c:	4a48      	ldr	r2, [pc, #288]	; (8001d90 <HAL_TIM_PWM_Start_DMA+0x204>)
 8001c6e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001c74:	6879      	ldr	r1, [r7, #4]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	3338      	adds	r3, #56	; 0x38
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	887b      	ldrh	r3, [r7, #2]
 8001c80:	f7fe fe5a 	bl	8000938 <HAL_DMA_Start_IT>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e077      	b.n	8001d7e <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68da      	ldr	r2, [r3, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c9c:	60da      	str	r2, [r3, #12]
      break;
 8001c9e:	e048      	b.n	8001d32 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca4:	4a38      	ldr	r2, [pc, #224]	; (8001d88 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8001ca6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cac:	4a37      	ldr	r2, [pc, #220]	; (8001d8c <HAL_TIM_PWM_Start_DMA+0x200>)
 8001cae:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb4:	4a36      	ldr	r2, [pc, #216]	; (8001d90 <HAL_TIM_PWM_Start_DMA+0x204>)
 8001cb6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	333c      	adds	r3, #60	; 0x3c
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	887b      	ldrh	r3, [r7, #2]
 8001cc8:	f7fe fe36 	bl	8000938 <HAL_DMA_Start_IT>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e053      	b.n	8001d7e <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68da      	ldr	r2, [r3, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ce4:	60da      	str	r2, [r3, #12]
      break;
 8001ce6:	e024      	b.n	8001d32 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cec:	4a26      	ldr	r2, [pc, #152]	; (8001d88 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8001cee:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf4:	4a25      	ldr	r2, [pc, #148]	; (8001d8c <HAL_TIM_PWM_Start_DMA+0x200>)
 8001cf6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfc:	4a24      	ldr	r2, [pc, #144]	; (8001d90 <HAL_TIM_PWM_Start_DMA+0x204>)
 8001cfe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d04:	6879      	ldr	r1, [r7, #4]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	3340      	adds	r3, #64	; 0x40
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	887b      	ldrh	r3, [r7, #2]
 8001d10:	f7fe fe12 	bl	8000938 <HAL_DMA_Start_IT>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e02f      	b.n	8001d7e <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001d2c:	60da      	str	r2, [r3, #12]
      break;
 8001d2e:	e000      	b.n	8001d32 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 8001d30:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2201      	movs	r2, #1
 8001d38:	68b9      	ldr	r1, [r7, #8]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 fb84 	bl	8002448 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a13      	ldr	r2, [pc, #76]	; (8001d94 <HAL_TIM_PWM_Start_DMA+0x208>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d107      	bne.n	8001d5a <HAL_TIM_PWM_Start_DMA+0x1ce>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	2b06      	cmp	r3, #6
 8001d6a:	d007      	beq.n	8001d7c <HAL_TIM_PWM_Start_DMA+0x1f0>
  {
    __HAL_TIM_ENABLE(htim);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 0201 	orr.w	r2, r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	08001f7f 	.word	0x08001f7f
 8001d8c:	08001fef 	.word	0x08001fef
 8001d90:	08001f5b 	.word	0x08001f5b
 8001d94:	40012c00 	.word	0x40012c00

08001d98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d101      	bne.n	8001db2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001dae:	2302      	movs	r3, #2
 8001db0:	e0b4      	b.n	8001f1c <HAL_TIM_PWM_ConfigChannel+0x184>
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b0c      	cmp	r3, #12
 8001dc6:	f200 809f 	bhi.w	8001f08 <HAL_TIM_PWM_ConfigChannel+0x170>
 8001dca:	a201      	add	r2, pc, #4	; (adr r2, 8001dd0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd0:	08001e05 	.word	0x08001e05
 8001dd4:	08001f09 	.word	0x08001f09
 8001dd8:	08001f09 	.word	0x08001f09
 8001ddc:	08001f09 	.word	0x08001f09
 8001de0:	08001e45 	.word	0x08001e45
 8001de4:	08001f09 	.word	0x08001f09
 8001de8:	08001f09 	.word	0x08001f09
 8001dec:	08001f09 	.word	0x08001f09
 8001df0:	08001e87 	.word	0x08001e87
 8001df4:	08001f09 	.word	0x08001f09
 8001df8:	08001f09 	.word	0x08001f09
 8001dfc:	08001f09 	.word	0x08001f09
 8001e00:	08001ec7 	.word	0x08001ec7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68b9      	ldr	r1, [r7, #8]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 f994 	bl	8002138 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	699a      	ldr	r2, [r3, #24]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0208 	orr.w	r2, r2, #8
 8001e1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	699a      	ldr	r2, [r3, #24]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 0204 	bic.w	r2, r2, #4
 8001e2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6999      	ldr	r1, [r3, #24]
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	691a      	ldr	r2, [r3, #16]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	619a      	str	r2, [r3, #24]
      break;
 8001e42:	e062      	b.n	8001f0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68b9      	ldr	r1, [r7, #8]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 f9da 	bl	8002204 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	699a      	ldr	r2, [r3, #24]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	699a      	ldr	r2, [r3, #24]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6999      	ldr	r1, [r3, #24]
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	021a      	lsls	r2, r3, #8
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	619a      	str	r2, [r3, #24]
      break;
 8001e84:	e041      	b.n	8001f0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68b9      	ldr	r1, [r7, #8]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f000 fa23 	bl	80022d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	69da      	ldr	r2, [r3, #28]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f042 0208 	orr.w	r2, r2, #8
 8001ea0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	69da      	ldr	r2, [r3, #28]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 0204 	bic.w	r2, r2, #4
 8001eb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	69d9      	ldr	r1, [r3, #28]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	691a      	ldr	r2, [r3, #16]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	61da      	str	r2, [r3, #28]
      break;
 8001ec4:	e021      	b.n	8001f0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68b9      	ldr	r1, [r7, #8]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f000 fa6d 	bl	80023ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	69da      	ldr	r2, [r3, #28]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ee0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	69da      	ldr	r2, [r3, #28]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ef0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	69d9      	ldr	r1, [r3, #28]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	021a      	lsls	r2, r3, #8
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	61da      	str	r2, [r3, #28]
      break;
 8001f06:	e000      	b.n	8001f0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8001f08:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bc80      	pop	{r7}
 8001f34:	4770      	bx	lr

08001f36 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr

08001f48 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr

08001f5a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b084      	sub	sp, #16
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f7ff ffe9 	bl	8001f48 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b084      	sub	sp, #16
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d103      	bne.n	8001fa6 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	771a      	strb	r2, [r3, #28]
 8001fa4:	e019      	b.n	8001fda <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d103      	bne.n	8001fb8 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	771a      	strb	r2, [r3, #28]
 8001fb6:	e010      	b.n	8001fda <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d103      	bne.n	8001fca <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2204      	movs	r2, #4
 8001fc6:	771a      	strb	r2, [r3, #28]
 8001fc8:	e007      	b.n	8001fda <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d102      	bne.n	8001fda <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2208      	movs	r2, #8
 8001fd8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f7ff ffa2 	bl	8001f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	771a      	strb	r2, [r3, #28]
}
 8001fe6:	bf00      	nop
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b084      	sub	sp, #16
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	429a      	cmp	r2, r3
 800200c:	d103      	bne.n	8002016 <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2201      	movs	r2, #1
 8002012:	771a      	strb	r2, [r3, #28]
 8002014:	e019      	b.n	800204a <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	429a      	cmp	r2, r3
 800201e:	d103      	bne.n	8002028 <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2202      	movs	r2, #2
 8002024:	771a      	strb	r2, [r3, #28]
 8002026:	e010      	b.n	800204a <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	429a      	cmp	r2, r3
 8002030:	d103      	bne.n	800203a <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2204      	movs	r2, #4
 8002036:	771a      	strb	r2, [r3, #28]
 8002038:	e007      	b.n	800204a <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	429a      	cmp	r2, r3
 8002042:	d102      	bne.n	800204a <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2208      	movs	r2, #8
 8002048:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f7ff ff73 	bl	8001f36 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	771a      	strb	r2, [r3, #28]
}
 8002056:	bf00      	nop
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a2d      	ldr	r2, [pc, #180]	; (8002128 <TIM_Base_SetConfig+0xc8>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d00f      	beq.n	8002098 <TIM_Base_SetConfig+0x38>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800207e:	d00b      	beq.n	8002098 <TIM_Base_SetConfig+0x38>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a2a      	ldr	r2, [pc, #168]	; (800212c <TIM_Base_SetConfig+0xcc>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d007      	beq.n	8002098 <TIM_Base_SetConfig+0x38>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a29      	ldr	r2, [pc, #164]	; (8002130 <TIM_Base_SetConfig+0xd0>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d003      	beq.n	8002098 <TIM_Base_SetConfig+0x38>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a28      	ldr	r2, [pc, #160]	; (8002134 <TIM_Base_SetConfig+0xd4>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d108      	bne.n	80020aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800209e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a1e      	ldr	r2, [pc, #120]	; (8002128 <TIM_Base_SetConfig+0xc8>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d00f      	beq.n	80020d2 <TIM_Base_SetConfig+0x72>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020b8:	d00b      	beq.n	80020d2 <TIM_Base_SetConfig+0x72>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a1b      	ldr	r2, [pc, #108]	; (800212c <TIM_Base_SetConfig+0xcc>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d007      	beq.n	80020d2 <TIM_Base_SetConfig+0x72>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a1a      	ldr	r2, [pc, #104]	; (8002130 <TIM_Base_SetConfig+0xd0>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d003      	beq.n	80020d2 <TIM_Base_SetConfig+0x72>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a19      	ldr	r2, [pc, #100]	; (8002134 <TIM_Base_SetConfig+0xd4>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d108      	bne.n	80020e4 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a07      	ldr	r2, [pc, #28]	; (8002128 <TIM_Base_SetConfig+0xc8>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d103      	bne.n	8002118 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	691a      	ldr	r2, [r3, #16]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	615a      	str	r2, [r3, #20]
}
 800211e:	bf00      	nop
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr
 8002128:	40012c00 	.word	0x40012c00
 800212c:	40000400 	.word	0x40000400
 8002130:	40000800 	.word	0x40000800
 8002134:	40000c00 	.word	0x40000c00

08002138 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002138:	b480      	push	{r7}
 800213a:	b087      	sub	sp, #28
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	f023 0201 	bic.w	r2, r3, #1
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f023 0303 	bic.w	r3, r3, #3
 800216e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	4313      	orrs	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	f023 0302 	bic.w	r3, r3, #2
 8002180:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	4313      	orrs	r3, r2
 800218a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a1c      	ldr	r2, [pc, #112]	; (8002200 <TIM_OC1_SetConfig+0xc8>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d10c      	bne.n	80021ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	f023 0308 	bic.w	r3, r3, #8
 800219a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f023 0304 	bic.w	r3, r3, #4
 80021ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a13      	ldr	r2, [pc, #76]	; (8002200 <TIM_OC1_SetConfig+0xc8>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d111      	bne.n	80021da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	621a      	str	r2, [r3, #32]
}
 80021f4:	bf00      	nop
 80021f6:	371c      	adds	r7, #28
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc80      	pop	{r7}
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40012c00 	.word	0x40012c00

08002204 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002204:	b480      	push	{r7}
 8002206:	b087      	sub	sp, #28
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	f023 0210 	bic.w	r2, r3, #16
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800223a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	021b      	lsls	r3, r3, #8
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	4313      	orrs	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f023 0320 	bic.w	r3, r3, #32
 800224e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	011b      	lsls	r3, r3, #4
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	4313      	orrs	r3, r2
 800225a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a1d      	ldr	r2, [pc, #116]	; (80022d4 <TIM_OC2_SetConfig+0xd0>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d10d      	bne.n	8002280 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800226a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	011b      	lsls	r3, r3, #4
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	4313      	orrs	r3, r2
 8002276:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800227e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a14      	ldr	r2, [pc, #80]	; (80022d4 <TIM_OC2_SetConfig+0xd0>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d113      	bne.n	80022b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800228e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002296:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	695b      	ldr	r3, [r3, #20]
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	621a      	str	r2, [r3, #32]
}
 80022ca:	bf00      	nop
 80022cc:	371c      	adds	r7, #28
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr
 80022d4:	40012c00 	.word	0x40012c00

080022d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022d8:	b480      	push	{r7}
 80022da:	b087      	sub	sp, #28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f023 0303 	bic.w	r3, r3, #3
 800230e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	4313      	orrs	r3, r2
 8002318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002320:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	021b      	lsls	r3, r3, #8
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	4313      	orrs	r3, r2
 800232c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a1d      	ldr	r2, [pc, #116]	; (80023a8 <TIM_OC3_SetConfig+0xd0>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d10d      	bne.n	8002352 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800233c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	021b      	lsls	r3, r3, #8
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	4313      	orrs	r3, r2
 8002348:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002350:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <TIM_OC3_SetConfig+0xd0>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d113      	bne.n	8002382 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002360:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002368:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	011b      	lsls	r3, r3, #4
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	4313      	orrs	r3, r2
 8002374:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	4313      	orrs	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	621a      	str	r2, [r3, #32]
}
 800239c:	bf00      	nop
 800239e:	371c      	adds	r7, #28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	40012c00 	.word	0x40012c00

080023ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b087      	sub	sp, #28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	021b      	lsls	r3, r3, #8
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	031b      	lsls	r3, r3, #12
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a0f      	ldr	r2, [pc, #60]	; (8002444 <TIM_OC4_SetConfig+0x98>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d109      	bne.n	8002420 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002412:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	019b      	lsls	r3, r3, #6
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	4313      	orrs	r3, r2
 800241e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	621a      	str	r2, [r3, #32]
}
 800243a:	bf00      	nop
 800243c:	371c      	adds	r7, #28
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr
 8002444:	40012c00 	.word	0x40012c00

08002448 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002448:	b480      	push	{r7}
 800244a:	b087      	sub	sp, #28
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	f003 031f 	and.w	r3, r3, #31
 800245a:	2201      	movs	r2, #1
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6a1a      	ldr	r2, [r3, #32]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	43db      	mvns	r3, r3
 800246a:	401a      	ands	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6a1a      	ldr	r2, [r3, #32]
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	f003 031f 	and.w	r3, r3, #31
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	fa01 f303 	lsl.w	r3, r1, r3
 8002480:	431a      	orrs	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	621a      	str	r2, [r3, #32]
}
 8002486:	bf00      	nop
 8002488:	371c      	adds	r7, #28
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr

08002490 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d101      	bne.n	80024a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024a4:	2302      	movs	r3, #2
 80024a6:	e032      	b.n	800250e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2202      	movs	r2, #2
 80024b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024e0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr

08002518 <DMA_Callback>:
#include "WS2812_Lib.h"

uint16_t WS2812_TIM_BUF[WS2812_BUFLEN];
uint8_t dma_ready = 1;

void DMA_Callback(void) {
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
	dma_ready = 1;
 800251c:	4b03      	ldr	r3, [pc, #12]	; (800252c <DMA_Callback+0x14>)
 800251e:	2201      	movs	r2, #1
 8002520:	701a      	strb	r2, [r3, #0]
}
 8002522:	bf00      	nop
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	20000005 	.word	0x20000005

08002530 <calcBuf>:
/**
 * Internal function, calculates the HI or LO values for the 800 kHz WS2812 signal and puts them into a buffer for the Timer-DMA
 *
 */
void calcBuf(void)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
  uint32_t n;
  uint32_t pos;
  WS2812_RGB_t led;

  pos=0;
 8002536:	2300      	movs	r3, #0
 8002538:	60bb      	str	r3, [r7, #8]
  // set timings for all LEDs
  for(n=0;n<WS2812_NUM_LEDS_CH1;n++) {
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	e15a      	b.n	80027f6 <calcBuf+0x2c6>
    led=WS2812_LED_BUF_CH1[n];
 8002540:	49b0      	ldr	r1, [pc, #704]	; (8002804 <calcBuf+0x2d4>)
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	4613      	mov	r3, r2
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	4413      	add	r3, r2
 800254a:	18ca      	adds	r2, r1, r3
 800254c:	1d3b      	adds	r3, r7, #4
 800254e:	8811      	ldrh	r1, [r2, #0]
 8002550:	7892      	ldrb	r2, [r2, #2]
 8002552:	8019      	strh	r1, [r3, #0]
 8002554:	709a      	strb	r2, [r3, #2]

    // Col:Green , Bit:7..0
    WS2812_TIM_BUF[pos++]=((led.green&0x80) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8002556:	797b      	ldrb	r3, [r7, #5]
 8002558:	b25b      	sxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	da01      	bge.n	8002562 <calcBuf+0x32>
 800255e:	213a      	movs	r1, #58	; 0x3a
 8002560:	e000      	b.n	8002564 <calcBuf+0x34>
 8002562:	211d      	movs	r1, #29
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	60ba      	str	r2, [r7, #8]
 800256a:	4aa7      	ldr	r2, [pc, #668]	; (8002808 <calcBuf+0x2d8>)
 800256c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x40) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8002570:	797b      	ldrb	r3, [r7, #5]
 8002572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <calcBuf+0x4e>
 800257a:	213a      	movs	r1, #58	; 0x3a
 800257c:	e000      	b.n	8002580 <calcBuf+0x50>
 800257e:	211d      	movs	r1, #29
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	60ba      	str	r2, [r7, #8]
 8002586:	4aa0      	ldr	r2, [pc, #640]	; (8002808 <calcBuf+0x2d8>)
 8002588:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x20) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 800258c:	797b      	ldrb	r3, [r7, #5]
 800258e:	f003 0320 	and.w	r3, r3, #32
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <calcBuf+0x6a>
 8002596:	213a      	movs	r1, #58	; 0x3a
 8002598:	e000      	b.n	800259c <calcBuf+0x6c>
 800259a:	211d      	movs	r1, #29
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	60ba      	str	r2, [r7, #8]
 80025a2:	4a99      	ldr	r2, [pc, #612]	; (8002808 <calcBuf+0x2d8>)
 80025a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x10) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80025a8:	797b      	ldrb	r3, [r7, #5]
 80025aa:	f003 0310 	and.w	r3, r3, #16
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <calcBuf+0x86>
 80025b2:	213a      	movs	r1, #58	; 0x3a
 80025b4:	e000      	b.n	80025b8 <calcBuf+0x88>
 80025b6:	211d      	movs	r1, #29
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	1c5a      	adds	r2, r3, #1
 80025bc:	60ba      	str	r2, [r7, #8]
 80025be:	4a92      	ldr	r2, [pc, #584]	; (8002808 <calcBuf+0x2d8>)
 80025c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x08) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80025c4:	797b      	ldrb	r3, [r7, #5]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <calcBuf+0xa2>
 80025ce:	213a      	movs	r1, #58	; 0x3a
 80025d0:	e000      	b.n	80025d4 <calcBuf+0xa4>
 80025d2:	211d      	movs	r1, #29
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	1c5a      	adds	r2, r3, #1
 80025d8:	60ba      	str	r2, [r7, #8]
 80025da:	4a8b      	ldr	r2, [pc, #556]	; (8002808 <calcBuf+0x2d8>)
 80025dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x04) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80025e0:	797b      	ldrb	r3, [r7, #5]
 80025e2:	f003 0304 	and.w	r3, r3, #4
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <calcBuf+0xbe>
 80025ea:	213a      	movs	r1, #58	; 0x3a
 80025ec:	e000      	b.n	80025f0 <calcBuf+0xc0>
 80025ee:	211d      	movs	r1, #29
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	1c5a      	adds	r2, r3, #1
 80025f4:	60ba      	str	r2, [r7, #8]
 80025f6:	4a84      	ldr	r2, [pc, #528]	; (8002808 <calcBuf+0x2d8>)
 80025f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x02) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80025fc:	797b      	ldrb	r3, [r7, #5]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <calcBuf+0xda>
 8002606:	213a      	movs	r1, #58	; 0x3a
 8002608:	e000      	b.n	800260c <calcBuf+0xdc>
 800260a:	211d      	movs	r1, #29
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	1c5a      	adds	r2, r3, #1
 8002610:	60ba      	str	r2, [r7, #8]
 8002612:	4a7d      	ldr	r2, [pc, #500]	; (8002808 <calcBuf+0x2d8>)
 8002614:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x01) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8002618:	797b      	ldrb	r3, [r7, #5]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <calcBuf+0xf6>
 8002622:	213a      	movs	r1, #58	; 0x3a
 8002624:	e000      	b.n	8002628 <calcBuf+0xf8>
 8002626:	211d      	movs	r1, #29
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	1c5a      	adds	r2, r3, #1
 800262c:	60ba      	str	r2, [r7, #8]
 800262e:	4a76      	ldr	r2, [pc, #472]	; (8002808 <calcBuf+0x2d8>)
 8002630:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    // Col:Red , Bit:7..0
    WS2812_TIM_BUF[pos++]=((led.red&0x80) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8002634:	793b      	ldrb	r3, [r7, #4]
 8002636:	b25b      	sxtb	r3, r3
 8002638:	2b00      	cmp	r3, #0
 800263a:	da01      	bge.n	8002640 <calcBuf+0x110>
 800263c:	213a      	movs	r1, #58	; 0x3a
 800263e:	e000      	b.n	8002642 <calcBuf+0x112>
 8002640:	211d      	movs	r1, #29
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	1c5a      	adds	r2, r3, #1
 8002646:	60ba      	str	r2, [r7, #8]
 8002648:	4a6f      	ldr	r2, [pc, #444]	; (8002808 <calcBuf+0x2d8>)
 800264a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x40) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 800264e:	793b      	ldrb	r3, [r7, #4]
 8002650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <calcBuf+0x12c>
 8002658:	213a      	movs	r1, #58	; 0x3a
 800265a:	e000      	b.n	800265e <calcBuf+0x12e>
 800265c:	211d      	movs	r1, #29
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	1c5a      	adds	r2, r3, #1
 8002662:	60ba      	str	r2, [r7, #8]
 8002664:	4a68      	ldr	r2, [pc, #416]	; (8002808 <calcBuf+0x2d8>)
 8002666:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x20) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 800266a:	793b      	ldrb	r3, [r7, #4]
 800266c:	f003 0320 	and.w	r3, r3, #32
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <calcBuf+0x148>
 8002674:	213a      	movs	r1, #58	; 0x3a
 8002676:	e000      	b.n	800267a <calcBuf+0x14a>
 8002678:	211d      	movs	r1, #29
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	60ba      	str	r2, [r7, #8]
 8002680:	4a61      	ldr	r2, [pc, #388]	; (8002808 <calcBuf+0x2d8>)
 8002682:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x10) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8002686:	793b      	ldrb	r3, [r7, #4]
 8002688:	f003 0310 	and.w	r3, r3, #16
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <calcBuf+0x164>
 8002690:	213a      	movs	r1, #58	; 0x3a
 8002692:	e000      	b.n	8002696 <calcBuf+0x166>
 8002694:	211d      	movs	r1, #29
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	1c5a      	adds	r2, r3, #1
 800269a:	60ba      	str	r2, [r7, #8]
 800269c:	4a5a      	ldr	r2, [pc, #360]	; (8002808 <calcBuf+0x2d8>)
 800269e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x08) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80026a2:	793b      	ldrb	r3, [r7, #4]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <calcBuf+0x180>
 80026ac:	213a      	movs	r1, #58	; 0x3a
 80026ae:	e000      	b.n	80026b2 <calcBuf+0x182>
 80026b0:	211d      	movs	r1, #29
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	1c5a      	adds	r2, r3, #1
 80026b6:	60ba      	str	r2, [r7, #8]
 80026b8:	4a53      	ldr	r2, [pc, #332]	; (8002808 <calcBuf+0x2d8>)
 80026ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x04) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80026be:	793b      	ldrb	r3, [r7, #4]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <calcBuf+0x19c>
 80026c8:	213a      	movs	r1, #58	; 0x3a
 80026ca:	e000      	b.n	80026ce <calcBuf+0x19e>
 80026cc:	211d      	movs	r1, #29
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	1c5a      	adds	r2, r3, #1
 80026d2:	60ba      	str	r2, [r7, #8]
 80026d4:	4a4c      	ldr	r2, [pc, #304]	; (8002808 <calcBuf+0x2d8>)
 80026d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x02) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80026da:	793b      	ldrb	r3, [r7, #4]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <calcBuf+0x1b8>
 80026e4:	213a      	movs	r1, #58	; 0x3a
 80026e6:	e000      	b.n	80026ea <calcBuf+0x1ba>
 80026e8:	211d      	movs	r1, #29
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	1c5a      	adds	r2, r3, #1
 80026ee:	60ba      	str	r2, [r7, #8]
 80026f0:	4a45      	ldr	r2, [pc, #276]	; (8002808 <calcBuf+0x2d8>)
 80026f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x01) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80026f6:	793b      	ldrb	r3, [r7, #4]
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <calcBuf+0x1d4>
 8002700:	213a      	movs	r1, #58	; 0x3a
 8002702:	e000      	b.n	8002706 <calcBuf+0x1d6>
 8002704:	211d      	movs	r1, #29
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	1c5a      	adds	r2, r3, #1
 800270a:	60ba      	str	r2, [r7, #8]
 800270c:	4a3e      	ldr	r2, [pc, #248]	; (8002808 <calcBuf+0x2d8>)
 800270e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	// Col:Blue , Bit:7..0
	WS2812_TIM_BUF[pos++]=((led.blue&0x80) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8002712:	79bb      	ldrb	r3, [r7, #6]
 8002714:	b25b      	sxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	da01      	bge.n	800271e <calcBuf+0x1ee>
 800271a:	213a      	movs	r1, #58	; 0x3a
 800271c:	e000      	b.n	8002720 <calcBuf+0x1f0>
 800271e:	211d      	movs	r1, #29
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	60ba      	str	r2, [r7, #8]
 8002726:	4a38      	ldr	r2, [pc, #224]	; (8002808 <calcBuf+0x2d8>)
 8002728:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x40) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 800272c:	79bb      	ldrb	r3, [r7, #6]
 800272e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <calcBuf+0x20a>
 8002736:	213a      	movs	r1, #58	; 0x3a
 8002738:	e000      	b.n	800273c <calcBuf+0x20c>
 800273a:	211d      	movs	r1, #29
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	60ba      	str	r2, [r7, #8]
 8002742:	4a31      	ldr	r2, [pc, #196]	; (8002808 <calcBuf+0x2d8>)
 8002744:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x20) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8002748:	79bb      	ldrb	r3, [r7, #6]
 800274a:	f003 0320 	and.w	r3, r3, #32
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <calcBuf+0x226>
 8002752:	213a      	movs	r1, #58	; 0x3a
 8002754:	e000      	b.n	8002758 <calcBuf+0x228>
 8002756:	211d      	movs	r1, #29
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	1c5a      	adds	r2, r3, #1
 800275c:	60ba      	str	r2, [r7, #8]
 800275e:	4a2a      	ldr	r2, [pc, #168]	; (8002808 <calcBuf+0x2d8>)
 8002760:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x10) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8002764:	79bb      	ldrb	r3, [r7, #6]
 8002766:	f003 0310 	and.w	r3, r3, #16
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <calcBuf+0x242>
 800276e:	213a      	movs	r1, #58	; 0x3a
 8002770:	e000      	b.n	8002774 <calcBuf+0x244>
 8002772:	211d      	movs	r1, #29
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	1c5a      	adds	r2, r3, #1
 8002778:	60ba      	str	r2, [r7, #8]
 800277a:	4a23      	ldr	r2, [pc, #140]	; (8002808 <calcBuf+0x2d8>)
 800277c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x08) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8002780:	79bb      	ldrb	r3, [r7, #6]
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <calcBuf+0x25e>
 800278a:	213a      	movs	r1, #58	; 0x3a
 800278c:	e000      	b.n	8002790 <calcBuf+0x260>
 800278e:	211d      	movs	r1, #29
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	60ba      	str	r2, [r7, #8]
 8002796:	4a1c      	ldr	r2, [pc, #112]	; (8002808 <calcBuf+0x2d8>)
 8002798:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x04) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 800279c:	79bb      	ldrb	r3, [r7, #6]
 800279e:	f003 0304 	and.w	r3, r3, #4
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <calcBuf+0x27a>
 80027a6:	213a      	movs	r1, #58	; 0x3a
 80027a8:	e000      	b.n	80027ac <calcBuf+0x27c>
 80027aa:	211d      	movs	r1, #29
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	60ba      	str	r2, [r7, #8]
 80027b2:	4a15      	ldr	r2, [pc, #84]	; (8002808 <calcBuf+0x2d8>)
 80027b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x02) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80027b8:	79bb      	ldrb	r3, [r7, #6]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <calcBuf+0x296>
 80027c2:	213a      	movs	r1, #58	; 0x3a
 80027c4:	e000      	b.n	80027c8 <calcBuf+0x298>
 80027c6:	211d      	movs	r1, #29
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	1c5a      	adds	r2, r3, #1
 80027cc:	60ba      	str	r2, [r7, #8]
 80027ce:	4a0e      	ldr	r2, [pc, #56]	; (8002808 <calcBuf+0x2d8>)
 80027d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x01) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80027d4:	79bb      	ldrb	r3, [r7, #6]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <calcBuf+0x2b2>
 80027de:	213a      	movs	r1, #58	; 0x3a
 80027e0:	e000      	b.n	80027e4 <calcBuf+0x2b4>
 80027e2:	211d      	movs	r1, #29
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	60ba      	str	r2, [r7, #8]
 80027ea:	4a07      	ldr	r2, [pc, #28]	; (8002808 <calcBuf+0x2d8>)
 80027ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(n=0;n<WS2812_NUM_LEDS_CH1;n++) {
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	3301      	adds	r3, #1
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	f67f aea1 	bls.w	8002540 <calcBuf+0x10>
  }

  // short pause after all LEDs have been updated
  for(n=0;n<48;n++) {
 80027fe:	2300      	movs	r3, #0
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	e00d      	b.n	8002820 <calcBuf+0x2f0>
 8002804:	20000200 	.word	0x20000200
 8002808:	2000002c 	.word	0x2000002c
    WS2812_TIM_BUF[pos++]=0;
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	1c5a      	adds	r2, r3, #1
 8002810:	60ba      	str	r2, [r7, #8]
 8002812:	4a07      	ldr	r2, [pc, #28]	; (8002830 <calcBuf+0x300>)
 8002814:	2100      	movs	r1, #0
 8002816:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(n=0;n<48;n++) {
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	3301      	adds	r3, #1
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2b2f      	cmp	r3, #47	; 0x2f
 8002824:	d9f2      	bls.n	800280c <calcBuf+0x2dc>
  }
}
 8002826:	bf00      	nop
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr
 8002830:	2000002c 	.word	0x2000002c

08002834 <startDMA>:

/**
 * Internal function; start DMA transfer
 */
void startDMA(void) {
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
	//uint8_t test[8] = {10};
	//DMA Sperren
	dma_ready = 0;
 8002838:	4b05      	ldr	r3, [pc, #20]	; (8002850 <startDMA+0x1c>)
 800283a:	2200      	movs	r2, #0
 800283c:	701a      	strb	r2, [r3, #0]
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, (uint32_t *)WS2812_TIM_BUF, WS2812_BUFLEN);
 800283e:	23a8      	movs	r3, #168	; 0xa8
 8002840:	4a04      	ldr	r2, [pc, #16]	; (8002854 <startDMA+0x20>)
 8002842:	2108      	movs	r1, #8
 8002844:	4804      	ldr	r0, [pc, #16]	; (8002858 <startDMA+0x24>)
 8002846:	f7ff f9a1 	bl	8001b8c <HAL_TIM_PWM_Start_DMA>
}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000005 	.word	0x20000005
 8002854:	2000002c 	.word	0x2000002c
 8002858:	2000017c 	.word	0x2000017c

0800285c <WS2812_Refresh>:

void WS2812_Refresh(void) {
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0

	while(!dma_ready);
 8002860:	bf00      	nop
 8002862:	4b05      	ldr	r3, [pc, #20]	; (8002878 <WS2812_Refresh+0x1c>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0fb      	beq.n	8002862 <WS2812_Refresh+0x6>
	calcBuf();
 800286a:	f7ff fe61 	bl	8002530 <calcBuf>
	startDMA();
 800286e:	f7ff ffe1 	bl	8002834 <startDMA>
}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	20000005 	.word	0x20000005

0800287c <WS2812_Clear>:

/**
 * Set all LEDs to 0 (off) and update
 */
void WS2812_Clear(void) {
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
	uint16_t num;

	for(num = 0; num < WS2812_NUM_LEDS_CH1; num++) {
 8002882:	2300      	movs	r3, #0
 8002884:	80fb      	strh	r3, [r7, #6]
 8002886:	e01a      	b.n	80028be <WS2812_Clear+0x42>
		WS2812_LED_BUF_CH1[num] = (WS2812_RGB_t){0,0,0};
 8002888:	88fa      	ldrh	r2, [r7, #6]
 800288a:	4911      	ldr	r1, [pc, #68]	; (80028d0 <WS2812_Clear+0x54>)
 800288c:	4613      	mov	r3, r2
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	4413      	add	r3, r2
 8002892:	440b      	add	r3, r1
 8002894:	2100      	movs	r1, #0
 8002896:	7019      	strb	r1, [r3, #0]
 8002898:	490d      	ldr	r1, [pc, #52]	; (80028d0 <WS2812_Clear+0x54>)
 800289a:	4613      	mov	r3, r2
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	4413      	add	r3, r2
 80028a0:	440b      	add	r3, r1
 80028a2:	3301      	adds	r3, #1
 80028a4:	2100      	movs	r1, #0
 80028a6:	7019      	strb	r1, [r3, #0]
 80028a8:	4909      	ldr	r1, [pc, #36]	; (80028d0 <WS2812_Clear+0x54>)
 80028aa:	4613      	mov	r3, r2
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	4413      	add	r3, r2
 80028b0:	440b      	add	r3, r1
 80028b2:	3302      	adds	r3, #2
 80028b4:	2200      	movs	r2, #0
 80028b6:	701a      	strb	r2, [r3, #0]
	for(num = 0; num < WS2812_NUM_LEDS_CH1; num++) {
 80028b8:	88fb      	ldrh	r3, [r7, #6]
 80028ba:	3301      	adds	r3, #1
 80028bc:	80fb      	strh	r3, [r7, #6]
 80028be:	88fb      	ldrh	r3, [r7, #6]
 80028c0:	2b04      	cmp	r3, #4
 80028c2:	d9e1      	bls.n	8002888 <WS2812_Clear+0xc>
	}

	WS2812_Refresh();
 80028c4:	f7ff ffca 	bl	800285c <WS2812_Refresh>
}
 80028c8:	bf00      	nop
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	20000200 	.word	0x20000200

080028d4 <WS2812_One_RGB>:

/**
 * Set one LED (R, G, B values). If refresh == 1, update LEDs, otherwise just update buffer (if several function calls are to be done before refresh)
 */
void WS2812_One_RGB(uint32_t nr, WS2812_RGB_t rgb_col, uint8_t refresh)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	4613      	mov	r3, r2
 80028e0:	71fb      	strb	r3, [r7, #7]
  if(nr<WS2812_NUM_LEDS_CH1) {
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2b04      	cmp	r3, #4
 80028e6:	d811      	bhi.n	800290c <WS2812_One_RGB+0x38>
	  WS2812_LED_BUF_CH1[nr]=rgb_col;
 80028e8:	490a      	ldr	r1, [pc, #40]	; (8002914 <WS2812_One_RGB+0x40>)
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	4613      	mov	r3, r2
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	4413      	add	r3, r2
 80028f2:	440b      	add	r3, r1
 80028f4:	461a      	mov	r2, r3
 80028f6:	f107 0308 	add.w	r3, r7, #8
 80028fa:	8819      	ldrh	r1, [r3, #0]
 80028fc:	789b      	ldrb	r3, [r3, #2]
 80028fe:	8011      	strh	r1, [r2, #0]
 8002900:	7093      	strb	r3, [r2, #2]

    if(refresh==1) WS2812_Refresh();
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d101      	bne.n	800290c <WS2812_One_RGB+0x38>
 8002908:	f7ff ffa8 	bl	800285c <WS2812_Refresh>
  }
}
 800290c:	bf00      	nop
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20000200 	.word	0x20000200

08002918 <WS2812_Shift_Right>:

/**
 * Shift all LED values one to the right. First one will be turned off
 */
void WS2812_Shift_Right(uint8_t refresh)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	71fb      	strb	r3, [r7, #7]
  uint32_t n;

  if(WS2812_NUM_LEDS_CH1>1) {
    for(n=WS2812_NUM_LEDS_CH1-1;n>0;n--) {
 8002922:	2304      	movs	r3, #4
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	e014      	b.n	8002952 <WS2812_Shift_Right+0x3a>
    	WS2812_LED_BUF_CH1[n]=WS2812_LED_BUF_CH1[n-1];
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	1e5a      	subs	r2, r3, #1
 800292c:	481c      	ldr	r0, [pc, #112]	; (80029a0 <WS2812_Shift_Right+0x88>)
 800292e:	68f9      	ldr	r1, [r7, #12]
 8002930:	460b      	mov	r3, r1
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	440b      	add	r3, r1
 8002936:	4418      	add	r0, r3
 8002938:	4919      	ldr	r1, [pc, #100]	; (80029a0 <WS2812_Shift_Right+0x88>)
 800293a:	4613      	mov	r3, r2
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	4413      	add	r3, r2
 8002940:	18ca      	adds	r2, r1, r3
 8002942:	4603      	mov	r3, r0
 8002944:	8811      	ldrh	r1, [r2, #0]
 8002946:	7892      	ldrb	r2, [r2, #2]
 8002948:	8019      	strh	r1, [r3, #0]
 800294a:	709a      	strb	r2, [r3, #2]
    for(n=WS2812_NUM_LEDS_CH1-1;n>0;n--) {
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	3b01      	subs	r3, #1
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1e7      	bne.n	8002928 <WS2812_Shift_Right+0x10>
    }
    WS2812_LED_BUF_CH1[n]=(WS2812_RGB_t){0,0,0};
 8002958:	4911      	ldr	r1, [pc, #68]	; (80029a0 <WS2812_Shift_Right+0x88>)
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	4613      	mov	r3, r2
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	4413      	add	r3, r2
 8002962:	440b      	add	r3, r1
 8002964:	2200      	movs	r2, #0
 8002966:	701a      	strb	r2, [r3, #0]
 8002968:	490d      	ldr	r1, [pc, #52]	; (80029a0 <WS2812_Shift_Right+0x88>)
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	4613      	mov	r3, r2
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	4413      	add	r3, r2
 8002972:	440b      	add	r3, r1
 8002974:	3301      	adds	r3, #1
 8002976:	2200      	movs	r2, #0
 8002978:	701a      	strb	r2, [r3, #0]
 800297a:	4909      	ldr	r1, [pc, #36]	; (80029a0 <WS2812_Shift_Right+0x88>)
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	4613      	mov	r3, r2
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	4413      	add	r3, r2
 8002984:	440b      	add	r3, r1
 8002986:	3302      	adds	r3, #2
 8002988:	2200      	movs	r2, #0
 800298a:	701a      	strb	r2, [r3, #0]

    if(refresh==1) WS2812_Refresh();
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d101      	bne.n	8002996 <WS2812_Shift_Right+0x7e>
 8002992:	f7ff ff63 	bl	800285c <WS2812_Refresh>
  }
}
 8002996:	bf00      	nop
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	20000200 	.word	0x20000200

080029a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029aa:	f7fd fdbd 	bl	8000528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029ae:	f000 f829 	bl	8002a04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029b2:	f000 f8f1 	bl	8002b98 <MX_GPIO_Init>
  MX_DMA_Init();
 80029b6:	f000 f8d1 	bl	8002b5c <MX_DMA_Init>
  MX_TIM2_Init();
 80029ba:	f000 f877 	bl	8002aac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  uint8_t inc = 0;
 80029be:	2300      	movs	r3, #0
 80029c0:	71fb      	strb	r3, [r7, #7]
    /* USER CODE END WHILE */




	  WS2812_Shift_Right(0);
 80029c2:	2000      	movs	r0, #0
 80029c4:	f7ff ffa8 	bl	8002918 <WS2812_Shift_Right>
	  WS2812_One_RGB(0, (WS2812_RGB_t) {255, 255, 0}, 1);
 80029c8:	4a0d      	ldr	r2, [pc, #52]	; (8002a00 <main+0x5c>)
 80029ca:	1d3b      	adds	r3, r7, #4
 80029cc:	6812      	ldr	r2, [r2, #0]
 80029ce:	4611      	mov	r1, r2
 80029d0:	8019      	strh	r1, [r3, #0]
 80029d2:	3302      	adds	r3, #2
 80029d4:	0c12      	lsrs	r2, r2, #16
 80029d6:	701a      	strb	r2, [r3, #0]
 80029d8:	2201      	movs	r2, #1
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	2000      	movs	r0, #0
 80029de:	f7ff ff79 	bl	80028d4 <WS2812_One_RGB>
	  HAL_Delay(100);
 80029e2:	2064      	movs	r0, #100	; 0x64
 80029e4:	f7fd fe02 	bl	80005ec <HAL_Delay>
	  inc++;
 80029e8:	79fb      	ldrb	r3, [r7, #7]
 80029ea:	3301      	adds	r3, #1
 80029ec:	71fb      	strb	r3, [r7, #7]

	  if (inc == 5)
 80029ee:	79fb      	ldrb	r3, [r7, #7]
 80029f0:	2b05      	cmp	r3, #5
 80029f2:	d1e6      	bne.n	80029c2 <main+0x1e>
	  {
		  WS2812_Clear();
 80029f4:	f7ff ff42 	bl	800287c <WS2812_Clear>
		  inc = 0;
 80029f8:	2300      	movs	r3, #0
 80029fa:	71fb      	strb	r3, [r7, #7]
	  WS2812_Shift_Right(0);
 80029fc:	e7e1      	b.n	80029c2 <main+0x1e>
 80029fe:	bf00      	nop
 8002a00:	08002f24 	.word	0x08002f24

08002a04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b094      	sub	sp, #80	; 0x50
 8002a08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a0a:	f107 0318 	add.w	r3, r7, #24
 8002a0e:	2238      	movs	r2, #56	; 0x38
 8002a10:	2100      	movs	r1, #0
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 fa62 	bl	8002edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a18:	1d3b      	adds	r3, r7, #4
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	605a      	str	r2, [r3, #4]
 8002a20:	609a      	str	r2, [r3, #8]
 8002a22:	60da      	str	r2, [r3, #12]
 8002a24:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a26:	2301      	movs	r3, #1
 8002a28:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8002a30:	2304      	movs	r3, #4
 8002a32:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a34:	2301      	movs	r3, #1
 8002a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 8002a38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a3c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002a48:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002a4c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8002a4e:	2302      	movs	r3, #2
 8002a50:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 8002a52:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 8002a58:	2340      	movs	r3, #64	; 0x40
 8002a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a5c:	f107 0318 	add.w	r3, r7, #24
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fe fb8d 	bl	8001180 <HAL_RCC_OscConfig>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8002a6c:	f000 f8b6 	bl	8002bdc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a70:	230f      	movs	r3, #15
 8002a72:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a74:	2302      	movs	r3, #2
 8002a76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a86:	1d3b      	adds	r3, r7, #4
 8002a88:	2102      	movs	r1, #2
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fe fe8e 	bl	80017ac <HAL_RCC_ClockConfig>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002a96:	f000 f8a1 	bl	8002bdc <Error_Handler>
  }
  /** Configure the Systick interrupt time 
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8002a9a:	4b03      	ldr	r3, [pc, #12]	; (8002aa8 <SystemClock_Config+0xa4>)
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]
}
 8002aa0:	bf00      	nop
 8002aa2:	3750      	adds	r7, #80	; 0x50
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	42420070 	.word	0x42420070

08002aac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08a      	sub	sp, #40	; 0x28
 8002ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ab2:	f107 0320 	add.w	r3, r7, #32
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002abc:	1d3b      	adds	r3, r7, #4
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	605a      	str	r2, [r3, #4]
 8002ac4:	609a      	str	r2, [r3, #8]
 8002ac6:	60da      	str	r2, [r3, #12]
 8002ac8:	611a      	str	r2, [r3, #16]
 8002aca:	615a      	str	r2, [r3, #20]
 8002acc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ace:	4b22      	ldr	r3, [pc, #136]	; (8002b58 <MX_TIM2_Init+0xac>)
 8002ad0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ad4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002ad6:	4b20      	ldr	r3, [pc, #128]	; (8002b58 <MX_TIM2_Init+0xac>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002adc:	4b1e      	ldr	r3, [pc, #120]	; (8002b58 <MX_TIM2_Init+0xac>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 89;
 8002ae2:	4b1d      	ldr	r3, [pc, #116]	; (8002b58 <MX_TIM2_Init+0xac>)
 8002ae4:	2259      	movs	r2, #89	; 0x59
 8002ae6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ae8:	4b1b      	ldr	r3, [pc, #108]	; (8002b58 <MX_TIM2_Init+0xac>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aee:	4b1a      	ldr	r3, [pc, #104]	; (8002b58 <MX_TIM2_Init+0xac>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002af4:	4818      	ldr	r0, [pc, #96]	; (8002b58 <MX_TIM2_Init+0xac>)
 8002af6:	f7ff f81d 	bl	8001b34 <HAL_TIM_PWM_Init>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002b00:	f000 f86c 	bl	8002bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b04:	2300      	movs	r3, #0
 8002b06:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b0c:	f107 0320 	add.w	r3, r7, #32
 8002b10:	4619      	mov	r1, r3
 8002b12:	4811      	ldr	r0, [pc, #68]	; (8002b58 <MX_TIM2_Init+0xac>)
 8002b14:	f7ff fcbc 	bl	8002490 <HAL_TIMEx_MasterConfigSynchronization>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8002b1e:	f000 f85d 	bl	8002bdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b22:	2360      	movs	r3, #96	; 0x60
 8002b24:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002b26:	2300      	movs	r3, #0
 8002b28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002b32:	1d3b      	adds	r3, r7, #4
 8002b34:	2208      	movs	r2, #8
 8002b36:	4619      	mov	r1, r3
 8002b38:	4807      	ldr	r0, [pc, #28]	; (8002b58 <MX_TIM2_Init+0xac>)
 8002b3a:	f7ff f92d 	bl	8001d98 <HAL_TIM_PWM_ConfigChannel>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002b44:	f000 f84a 	bl	8002bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002b48:	4803      	ldr	r0, [pc, #12]	; (8002b58 <MX_TIM2_Init+0xac>)
 8002b4a:	f000 f8c3 	bl	8002cd4 <HAL_TIM_MspPostInit>

}
 8002b4e:	bf00      	nop
 8002b50:	3728      	adds	r7, #40	; 0x28
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	2000017c 	.word	0x2000017c

08002b5c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b62:	4b0c      	ldr	r3, [pc, #48]	; (8002b94 <MX_DMA_Init+0x38>)
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	4a0b      	ldr	r2, [pc, #44]	; (8002b94 <MX_DMA_Init+0x38>)
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	6153      	str	r3, [r2, #20]
 8002b6e:	4b09      	ldr	r3, [pc, #36]	; (8002b94 <MX_DMA_Init+0x38>)
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	607b      	str	r3, [r7, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	200b      	movs	r0, #11
 8002b80:	f7fd fe2d 	bl	80007de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002b84:	200b      	movs	r0, #11
 8002b86:	f7fd fe46 	bl	8000816 <HAL_NVIC_EnableIRQ>

}
 8002b8a:	bf00      	nop
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40021000 	.word	0x40021000

08002b98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b9e:	4b0e      	ldr	r3, [pc, #56]	; (8002bd8 <MX_GPIO_Init+0x40>)
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	4a0d      	ldr	r2, [pc, #52]	; (8002bd8 <MX_GPIO_Init+0x40>)
 8002ba4:	f043 0308 	orr.w	r3, r3, #8
 8002ba8:	6193      	str	r3, [r2, #24]
 8002baa:	4b0b      	ldr	r3, [pc, #44]	; (8002bd8 <MX_GPIO_Init+0x40>)
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	607b      	str	r3, [r7, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb6:	4b08      	ldr	r3, [pc, #32]	; (8002bd8 <MX_GPIO_Init+0x40>)
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	4a07      	ldr	r2, [pc, #28]	; (8002bd8 <MX_GPIO_Init+0x40>)
 8002bbc:	f043 0304 	orr.w	r3, r3, #4
 8002bc0:	6193      	str	r3, [r2, #24]
 8002bc2:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <MX_GPIO_Init+0x40>)
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	f003 0304 	and.w	r3, r3, #4
 8002bca:	603b      	str	r3, [r7, #0]
 8002bcc:	683b      	ldr	r3, [r7, #0]

}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr
 8002bd8:	40021000 	.word	0x40021000

08002bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002be0:	bf00      	nop
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr

08002be8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002bee:	4b13      	ldr	r3, [pc, #76]	; (8002c3c <HAL_MspInit+0x54>)
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	4a12      	ldr	r2, [pc, #72]	; (8002c3c <HAL_MspInit+0x54>)
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	6193      	str	r3, [r2, #24]
 8002bfa:	4b10      	ldr	r3, [pc, #64]	; (8002c3c <HAL_MspInit+0x54>)
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	60bb      	str	r3, [r7, #8]
 8002c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c06:	4b0d      	ldr	r3, [pc, #52]	; (8002c3c <HAL_MspInit+0x54>)
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	4a0c      	ldr	r2, [pc, #48]	; (8002c3c <HAL_MspInit+0x54>)
 8002c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c10:	61d3      	str	r3, [r2, #28]
 8002c12:	4b0a      	ldr	r3, [pc, #40]	; (8002c3c <HAL_MspInit+0x54>)
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1a:	607b      	str	r3, [r7, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State 
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 8002c1e:	4b08      	ldr	r3, [pc, #32]	; (8002c40 <HAL_MspInit+0x58>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	4a04      	ldr	r2, [pc, #16]	; (8002c40 <HAL_MspInit+0x58>)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c32:	bf00      	nop
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	40010000 	.word	0x40010000

08002c44 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c54:	d134      	bne.n	8002cc0 <HAL_TIM_PWM_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c56:	4b1c      	ldr	r3, [pc, #112]	; (8002cc8 <HAL_TIM_PWM_MspInit+0x84>)
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	4a1b      	ldr	r2, [pc, #108]	; (8002cc8 <HAL_TIM_PWM_MspInit+0x84>)
 8002c5c:	f043 0301 	orr.w	r3, r3, #1
 8002c60:	61d3      	str	r3, [r2, #28]
 8002c62:	4b19      	ldr	r3, [pc, #100]	; (8002cc8 <HAL_TIM_PWM_MspInit+0x84>)
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8002c6e:	4b17      	ldr	r3, [pc, #92]	; (8002ccc <HAL_TIM_PWM_MspInit+0x88>)
 8002c70:	4a17      	ldr	r2, [pc, #92]	; (8002cd0 <HAL_TIM_PWM_MspInit+0x8c>)
 8002c72:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c74:	4b15      	ldr	r3, [pc, #84]	; (8002ccc <HAL_TIM_PWM_MspInit+0x88>)
 8002c76:	2210      	movs	r2, #16
 8002c78:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c7a:	4b14      	ldr	r3, [pc, #80]	; (8002ccc <HAL_TIM_PWM_MspInit+0x88>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002c80:	4b12      	ldr	r3, [pc, #72]	; (8002ccc <HAL_TIM_PWM_MspInit+0x88>)
 8002c82:	2280      	movs	r2, #128	; 0x80
 8002c84:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c86:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <HAL_TIM_PWM_MspInit+0x88>)
 8002c88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c8c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c8e:	4b0f      	ldr	r3, [pc, #60]	; (8002ccc <HAL_TIM_PWM_MspInit+0x88>)
 8002c90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c94:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8002c96:	4b0d      	ldr	r3, [pc, #52]	; (8002ccc <HAL_TIM_PWM_MspInit+0x88>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <HAL_TIM_PWM_MspInit+0x88>)
 8002c9e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002ca2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8002ca4:	4809      	ldr	r0, [pc, #36]	; (8002ccc <HAL_TIM_PWM_MspInit+0x88>)
 8002ca6:	f7fd fdd1 	bl	800084c <HAL_DMA_Init>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <HAL_TIM_PWM_MspInit+0x70>
    {
      Error_Handler();
 8002cb0:	f7ff ff94 	bl	8002bdc <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a05      	ldr	r2, [pc, #20]	; (8002ccc <HAL_TIM_PWM_MspInit+0x88>)
 8002cb8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cba:	4a04      	ldr	r2, [pc, #16]	; (8002ccc <HAL_TIM_PWM_MspInit+0x88>)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002cc0:	bf00      	nop
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	200001bc 	.word	0x200001bc
 8002cd0:	40020008 	.word	0x40020008

08002cd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cdc:	f107 030c 	add.w	r3, r7, #12
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	605a      	str	r2, [r3, #4]
 8002ce6:	609a      	str	r2, [r3, #8]
 8002ce8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf2:	d12a      	bne.n	8002d4a <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf4:	4b17      	ldr	r3, [pc, #92]	; (8002d54 <HAL_TIM_MspPostInit+0x80>)
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	4a16      	ldr	r2, [pc, #88]	; (8002d54 <HAL_TIM_MspPostInit+0x80>)
 8002cfa:	f043 0308 	orr.w	r3, r3, #8
 8002cfe:	6193      	str	r3, [r2, #24]
 8002d00:	4b14      	ldr	r3, [pc, #80]	; (8002d54 <HAL_TIM_MspPostInit+0x80>)
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	f003 0308 	and.w	r3, r3, #8
 8002d08:	60bb      	str	r3, [r7, #8]
 8002d0a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PB10     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = WS2812_CH1_Pin;
 8002d0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d10:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d12:	2302      	movs	r3, #2
 8002d14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d16:	2302      	movs	r3, #2
 8002d18:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(WS2812_CH1_GPIO_Port, &GPIO_InitStruct);
 8002d1a:	f107 030c 	add.w	r3, r7, #12
 8002d1e:	4619      	mov	r1, r3
 8002d20:	480d      	ldr	r0, [pc, #52]	; (8002d58 <HAL_TIM_MspPostInit+0x84>)
 8002d22:	f7fe f8d3 	bl	8000ecc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8002d26:	4b0d      	ldr	r3, [pc, #52]	; (8002d5c <HAL_TIM_MspPostInit+0x88>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	61fb      	str	r3, [r7, #28]
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d32:	61fb      	str	r3, [r7, #28]
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002d3a:	61fb      	str	r3, [r7, #28]
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d42:	61fb      	str	r3, [r7, #28]
 8002d44:	4a05      	ldr	r2, [pc, #20]	; (8002d5c <HAL_TIM_MspPostInit+0x88>)
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002d4a:	bf00      	nop
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40021000 	.word	0x40021000
 8002d58:	40010c00 	.word	0x40010c00
 8002d5c:	40010000 	.word	0x40010000

08002d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d64:	bf00      	nop
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr

08002d6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d70:	e7fe      	b.n	8002d70 <HardFault_Handler+0x4>

08002d72 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d72:	b480      	push	{r7}
 8002d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d76:	e7fe      	b.n	8002d76 <MemManage_Handler+0x4>

08002d78 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d7c:	e7fe      	b.n	8002d7c <BusFault_Handler+0x4>

08002d7e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d82:	e7fe      	b.n	8002d82 <UsageFault_Handler+0x4>

08002d84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d88:	bf00      	nop
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr

08002d90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d94:	bf00      	nop
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bc80      	pop	{r7}
 8002d9a:	4770      	bx	lr

08002d9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002da0:	bf00      	nop
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr

08002da8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dac:	f7fd fc02 	bl	80005b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002db0:	bf00      	nop
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  //Setzt Flag (Alle Daten übertragen)
  DMA_Callback();
 8002db8:	f7ff fbae 	bl	8002518 <DMA_Callback>

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8002dbc:	4802      	ldr	r0, [pc, #8]	; (8002dc8 <DMA1_Channel1_IRQHandler+0x14>)
 8002dbe:	f7fd fe1b 	bl	80009f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002dc2:	bf00      	nop
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	200001bc 	.word	0x200001bc

08002dcc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002dd0:	4b1a      	ldr	r3, [pc, #104]	; (8002e3c <SystemInit+0x70>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a19      	ldr	r2, [pc, #100]	; (8002e3c <SystemInit+0x70>)
 8002dd6:	f043 0301 	orr.w	r3, r3, #1
 8002dda:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
#else
  RCC->CFGR &= 0xF0FF0000U;
 8002ddc:	4b17      	ldr	r3, [pc, #92]	; (8002e3c <SystemInit+0x70>)
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	4916      	ldr	r1, [pc, #88]	; (8002e3c <SystemInit+0x70>)
 8002de2:	4b17      	ldr	r3, [pc, #92]	; (8002e40 <SystemInit+0x74>)
 8002de4:	4013      	ands	r3, r2
 8002de6:	604b      	str	r3, [r1, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002de8:	4b14      	ldr	r3, [pc, #80]	; (8002e3c <SystemInit+0x70>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a13      	ldr	r2, [pc, #76]	; (8002e3c <SystemInit+0x70>)
 8002dee:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002df6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002df8:	4b10      	ldr	r3, [pc, #64]	; (8002e3c <SystemInit+0x70>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a0f      	ldr	r2, [pc, #60]	; (8002e3c <SystemInit+0x70>)
 8002dfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e02:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002e04:	4b0d      	ldr	r3, [pc, #52]	; (8002e3c <SystemInit+0x70>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	4a0c      	ldr	r2, [pc, #48]	; (8002e3c <SystemInit+0x70>)
 8002e0a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002e0e:	6053      	str	r3, [r2, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEBFFFFFFU;
 8002e10:	4b0a      	ldr	r3, [pc, #40]	; (8002e3c <SystemInit+0x70>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a09      	ldr	r2, [pc, #36]	; (8002e3c <SystemInit+0x70>)
 8002e16:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8002e1a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000U;
 8002e1c:	4b07      	ldr	r3, [pc, #28]	; (8002e3c <SystemInit+0x70>)
 8002e1e:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8002e22:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
 8002e24:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <SystemInit+0x70>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002e2a:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <SystemInit+0x78>)
 8002e2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e30:	609a      	str	r2, [r3, #8]
#endif 
}
 8002e32:	bf00      	nop
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	f0ff0000 	.word	0xf0ff0000
 8002e44:	e000ed00 	.word	0xe000ed00

08002e48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002e48:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002e4a:	e003      	b.n	8002e54 <LoopCopyDataInit>

08002e4c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002e4e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002e50:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002e52:	3104      	adds	r1, #4

08002e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002e54:	480a      	ldr	r0, [pc, #40]	; (8002e80 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002e56:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002e58:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002e5a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002e5c:	d3f6      	bcc.n	8002e4c <CopyDataInit>
  ldr r2, =_sbss
 8002e5e:	4a0a      	ldr	r2, [pc, #40]	; (8002e88 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002e60:	e002      	b.n	8002e68 <LoopFillZerobss>

08002e62 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002e62:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002e64:	f842 3b04 	str.w	r3, [r2], #4

08002e68 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002e68:	4b08      	ldr	r3, [pc, #32]	; (8002e8c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002e6a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002e6c:	d3f9      	bcc.n	8002e62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e6e:	f7ff ffad 	bl	8002dcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e72:	f000 f80f 	bl	8002e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e76:	f7ff fd95 	bl	80029a4 <main>
  bx lr
 8002e7a:	4770      	bx	lr
  ldr r3, =_sidata
 8002e7c:	08002f48 	.word	0x08002f48
  ldr r0, =_sdata
 8002e80:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002e84:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8002e88:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8002e8c:	20000210 	.word	0x20000210

08002e90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e90:	e7fe      	b.n	8002e90 <ADC1_2_IRQHandler>
	...

08002e94 <__libc_init_array>:
 8002e94:	b570      	push	{r4, r5, r6, lr}
 8002e96:	2500      	movs	r5, #0
 8002e98:	4e0c      	ldr	r6, [pc, #48]	; (8002ecc <__libc_init_array+0x38>)
 8002e9a:	4c0d      	ldr	r4, [pc, #52]	; (8002ed0 <__libc_init_array+0x3c>)
 8002e9c:	1ba4      	subs	r4, r4, r6
 8002e9e:	10a4      	asrs	r4, r4, #2
 8002ea0:	42a5      	cmp	r5, r4
 8002ea2:	d109      	bne.n	8002eb8 <__libc_init_array+0x24>
 8002ea4:	f000 f822 	bl	8002eec <_init>
 8002ea8:	2500      	movs	r5, #0
 8002eaa:	4e0a      	ldr	r6, [pc, #40]	; (8002ed4 <__libc_init_array+0x40>)
 8002eac:	4c0a      	ldr	r4, [pc, #40]	; (8002ed8 <__libc_init_array+0x44>)
 8002eae:	1ba4      	subs	r4, r4, r6
 8002eb0:	10a4      	asrs	r4, r4, #2
 8002eb2:	42a5      	cmp	r5, r4
 8002eb4:	d105      	bne.n	8002ec2 <__libc_init_array+0x2e>
 8002eb6:	bd70      	pop	{r4, r5, r6, pc}
 8002eb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ebc:	4798      	blx	r3
 8002ebe:	3501      	adds	r5, #1
 8002ec0:	e7ee      	b.n	8002ea0 <__libc_init_array+0xc>
 8002ec2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ec6:	4798      	blx	r3
 8002ec8:	3501      	adds	r5, #1
 8002eca:	e7f2      	b.n	8002eb2 <__libc_init_array+0x1e>
 8002ecc:	08002f40 	.word	0x08002f40
 8002ed0:	08002f40 	.word	0x08002f40
 8002ed4:	08002f40 	.word	0x08002f40
 8002ed8:	08002f44 	.word	0x08002f44

08002edc <memset>:
 8002edc:	4603      	mov	r3, r0
 8002ede:	4402      	add	r2, r0
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d100      	bne.n	8002ee6 <memset+0xa>
 8002ee4:	4770      	bx	lr
 8002ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8002eea:	e7f9      	b.n	8002ee0 <memset+0x4>

08002eec <_init>:
 8002eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eee:	bf00      	nop
 8002ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ef2:	bc08      	pop	{r3}
 8002ef4:	469e      	mov	lr, r3
 8002ef6:	4770      	bx	lr

08002ef8 <_fini>:
 8002ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002efa:	bf00      	nop
 8002efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002efe:	bc08      	pop	{r3}
 8002f00:	469e      	mov	lr, r3
 8002f02:	4770      	bx	lr
